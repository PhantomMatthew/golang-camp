// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: proto/customer/customer.proto

package go_micro_service_customer

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ModelPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num   int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num"`
	Size  int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size"`
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
}

func (x *ModelPage) Reset() {
	*x = ModelPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelPage) ProtoMessage() {}

func (x *ModelPage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelPage.ProtoReflect.Descriptor instead.
func (*ModelPage) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{0}
}

func (x *ModelPage) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ModelPage) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ModelPage) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetCustInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustId  uint32 `protobuf:"varint,1,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
	UnionId string `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"union_id"`
}

func (x *GetCustInfoReq) Reset() {
	*x = GetCustInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustInfoReq) ProtoMessage() {}

func (x *GetCustInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustInfoReq.ProtoReflect.Descriptor instead.
func (*GetCustInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{1}
}

func (x *GetCustInfoReq) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *GetCustInfoReq) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

type InitialActionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitialActionsReq) Reset() {
	*x = InitialActionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialActionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialActionsReq) ProtoMessage() {}

func (x *InitialActionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialActionsReq.ProtoReflect.Descriptor instead.
func (*InitialActionsReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{2}
}

type SyncHistoryInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastOid   string `protobuf:"bytes,1,opt,name=last_oid,json=lastOid,proto3" json:"last_oid"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	StartDate string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate   string `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	Tasks     string `protobuf:"bytes,5,opt,name=tasks,proto3" json:"tasks"`
}

func (x *SyncHistoryInfoReq) Reset() {
	*x = SyncHistoryInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncHistoryInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncHistoryInfoReq) ProtoMessage() {}

func (x *SyncHistoryInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncHistoryInfoReq.ProtoReflect.Descriptor instead.
func (*SyncHistoryInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{3}
}

func (x *SyncHistoryInfoReq) GetLastOid() string {
	if x != nil {
		return x.LastOid
	}
	return ""
}

func (x *SyncHistoryInfoReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SyncHistoryInfoReq) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SyncHistoryInfoReq) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SyncHistoryInfoReq) GetTasks() string {
	if x != nil {
		return x.Tasks
	}
	return ""
}

type GetCustPaInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaOpenId                string               `protobuf:"bytes,1,opt,name=pa_open_id,json=paOpenId,proto3" json:"pa_open_id"`
	PaSubscribed            bool                 `protobuf:"varint,2,opt,name=pa_subscribed,json=paSubscribed,proto3" json:"pa_subscribed"`
	PaHeadImageUrl          string               `protobuf:"bytes,3,opt,name=pa_head_image_url,json=paHeadImageUrl,proto3" json:"pa_head_image_url"`
	PaNickName              string               `protobuf:"bytes,4,opt,name=pa_nick_name,json=paNickName,proto3" json:"pa_nick_name"`
	PaSex                   int32                `protobuf:"varint,5,opt,name=pa_sex,json=paSex,proto3" json:"pa_sex"`
	PaCountry               string               `protobuf:"bytes,6,opt,name=pa_country,json=paCountry,proto3" json:"pa_country"`
	PaCity                  string               `protobuf:"bytes,7,opt,name=pa_city,json=paCity,proto3" json:"pa_city"`
	PaProvince              string               `protobuf:"bytes,8,opt,name=pa_province,json=paProvince,proto3" json:"pa_province"`
	PaRemark                string               `protobuf:"bytes,9,opt,name=pa_remark,json=paRemark,proto3" json:"pa_remark"`
	PaLanguage              string               `protobuf:"bytes,10,opt,name=pa_language,json=paLanguage,proto3" json:"pa_language"`
	PaUnsubscribeTime       *timestamp.Timestamp `protobuf:"bytes,11,opt,name=pa_unsubscribe_time,json=paUnsubscribeTime,proto3" json:"pa_unsubscribe_time"`
	PaFirstSubscibeScene    string               `protobuf:"bytes,12,opt,name=pa_first_subscibe_scene,json=paFirstSubscibeScene,proto3" json:"pa_first_subscibe_scene"`
	PaFirstSubscirbeSceneId string               `protobuf:"bytes,13,opt,name=pa_first_subscirbe_scene_id,json=paFirstSubscirbeSceneId,proto3" json:"pa_first_subscirbe_scene_id"`
	PaFirstSubscribeTime    *timestamp.Timestamp `protobuf:"bytes,14,opt,name=pa_first_subscribe_time,json=paFirstSubscribeTime,proto3" json:"pa_first_subscribe_time"`
	PaLastSubscribeTime     *timestamp.Timestamp `protobuf:"bytes,15,opt,name=pa_last_subscribe_time,json=paLastSubscribeTime,proto3" json:"pa_last_subscribe_time"`
	PaLastSubscribeScene    string               `protobuf:"bytes,16,opt,name=pa_last_subscribe_scene,json=paLastSubscribeScene,proto3" json:"pa_last_subscribe_scene"`
	PaLastSubscribeSceneId  string               `protobuf:"bytes,17,opt,name=pa_last_subscribe_scene_id,json=paLastSubscribeSceneId,proto3" json:"pa_last_subscribe_scene_id"`
	UnionId                 string               `protobuf:"bytes,18,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	CustId                  uint32               `protobuf:"varint,19,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustPaInfoRsp) Reset() {
	*x = GetCustPaInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustPaInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustPaInfoRsp) ProtoMessage() {}

func (x *GetCustPaInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustPaInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCustPaInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{4}
}

func (x *GetCustPaInfoRsp) GetPaOpenId() string {
	if x != nil {
		return x.PaOpenId
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaSubscribed() bool {
	if x != nil {
		return x.PaSubscribed
	}
	return false
}

func (x *GetCustPaInfoRsp) GetPaHeadImageUrl() string {
	if x != nil {
		return x.PaHeadImageUrl
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaNickName() string {
	if x != nil {
		return x.PaNickName
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaSex() int32 {
	if x != nil {
		return x.PaSex
	}
	return 0
}

func (x *GetCustPaInfoRsp) GetPaCountry() string {
	if x != nil {
		return x.PaCountry
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaCity() string {
	if x != nil {
		return x.PaCity
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaProvince() string {
	if x != nil {
		return x.PaProvince
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaRemark() string {
	if x != nil {
		return x.PaRemark
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaLanguage() string {
	if x != nil {
		return x.PaLanguage
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaUnsubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaUnsubscribeTime
	}
	return nil
}

func (x *GetCustPaInfoRsp) GetPaFirstSubscibeScene() string {
	if x != nil {
		return x.PaFirstSubscibeScene
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaFirstSubscirbeSceneId() string {
	if x != nil {
		return x.PaFirstSubscirbeSceneId
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaFirstSubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaFirstSubscribeTime
	}
	return nil
}

func (x *GetCustPaInfoRsp) GetPaLastSubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaLastSubscribeTime
	}
	return nil
}

func (x *GetCustPaInfoRsp) GetPaLastSubscribeScene() string {
	if x != nil {
		return x.PaLastSubscribeScene
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetPaLastSubscribeSceneId() string {
	if x != nil {
		return x.PaLastSubscribeSceneId
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *GetCustPaInfoRsp) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type SearchCustEmInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex          uint32 `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize           uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Phone              string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone"`
	NickName           string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name"`
	DzOwnerAccountId   int32  `protobuf:"varint,6,opt,name=dz_owner_account_id,json=dzOwnerAccountId,proto3" json:"dz_owner_account_id"`
	DzOwnerAccountName string `protobuf:"bytes,7,opt,name=dz_owner_account_name,json=dzOwnerAccountName,proto3" json:"dz_owner_account_name"`
}

func (x *SearchCustEmInfoListReq) Reset() {
	*x = SearchCustEmInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustEmInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustEmInfoListReq) ProtoMessage() {}

func (x *SearchCustEmInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustEmInfoListReq.ProtoReflect.Descriptor instead.
func (*SearchCustEmInfoListReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{5}
}

func (x *SearchCustEmInfoListReq) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *SearchCustEmInfoListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCustEmInfoListReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SearchCustEmInfoListReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *SearchCustEmInfoListReq) GetDzOwnerAccountId() int32 {
	if x != nil {
		return x.DzOwnerAccountId
	}
	return 0
}

func (x *SearchCustEmInfoListReq) GetDzOwnerAccountName() string {
	if x != nil {
		return x.DzOwnerAccountName
	}
	return ""
}

type SearchCustEmInfoListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                          `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Total     uint32                          `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	List      []*SearchCustEmInfoListRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *SearchCustEmInfoListRsp) Reset() {
	*x = SearchCustEmInfoListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustEmInfoListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustEmInfoListRsp) ProtoMessage() {}

func (x *SearchCustEmInfoListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustEmInfoListRsp.ProtoReflect.Descriptor instead.
func (*SearchCustEmInfoListRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{6}
}

func (x *SearchCustEmInfoListRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *SearchCustEmInfoListRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCustEmInfoListRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchCustEmInfoListRsp) GetList() []*SearchCustEmInfoListRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type SearchCustPaInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId             string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id"`
	UnionId            string `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	Phone              string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone"`
	NickName           string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name"`
	SubscribeTime      string `protobuf:"bytes,5,opt,name=subscribe_time,json=subscribeTime,proto3" json:"subscribe_time"`
	DzOwnerAccountId   int32  `protobuf:"varint,6,opt,name=dz_owner_account_id,json=dzOwnerAccountId,proto3" json:"dz_owner_account_id"`
	DzOwnerAccountName string `protobuf:"bytes,7,opt,name=dz_owner_account_name,json=dzOwnerAccountName,proto3" json:"dz_owner_account_name"`
	EmIsMember         bool   `protobuf:"varint,8,opt,name=em_is_member,json=emIsMember,proto3" json:"em_is_member"`
}

func (x *SearchCustPaInfoListReq) Reset() {
	*x = SearchCustPaInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustPaInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustPaInfoListReq) ProtoMessage() {}

func (x *SearchCustPaInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustPaInfoListReq.ProtoReflect.Descriptor instead.
func (*SearchCustPaInfoListReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{7}
}

func (x *SearchCustPaInfoListReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *SearchCustPaInfoListReq) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *SearchCustPaInfoListReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SearchCustPaInfoListReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *SearchCustPaInfoListReq) GetSubscribeTime() string {
	if x != nil {
		return x.SubscribeTime
	}
	return ""
}

func (x *SearchCustPaInfoListReq) GetDzOwnerAccountId() int32 {
	if x != nil {
		return x.DzOwnerAccountId
	}
	return 0
}

func (x *SearchCustPaInfoListReq) GetDzOwnerAccountName() string {
	if x != nil {
		return x.DzOwnerAccountName
	}
	return ""
}

func (x *SearchCustPaInfoListReq) GetEmIsMember() bool {
	if x != nil {
		return x.EmIsMember
	}
	return false
}

type SearchCustPaInfoListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                          `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Total     uint32                          `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	List      []*SearchCustPaInfoListRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *SearchCustPaInfoListRsp) Reset() {
	*x = SearchCustPaInfoListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustPaInfoListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustPaInfoListRsp) ProtoMessage() {}

func (x *SearchCustPaInfoListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustPaInfoListRsp.ProtoReflect.Descriptor instead.
func (*SearchCustPaInfoListRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{8}
}

func (x *SearchCustPaInfoListRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *SearchCustPaInfoListRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCustPaInfoListRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchCustPaInfoListRsp) GetList() []*SearchCustPaInfoListRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetCustEmInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmRegisterPhone   string               `protobuf:"bytes,1,opt,name=em_register_phone,json=emRegisterPhone,proto3" json:"em_register_phone"`
	EmAccountId       string               `protobuf:"bytes,2,opt,name=em_account_id,json=emAccountId,proto3" json:"em_account_id"`
	EmBirthday        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=em_birthday,json=emBirthday,proto3" json:"em_birthday"`
	EmGender          int32                `protobuf:"varint,4,opt,name=em_gender,json=emGender,proto3" json:"em_gender"`
	EmContactCity     string               `protobuf:"bytes,5,opt,name=em_contact_city,json=emContactCity,proto3" json:"em_contact_city"`
	EmContactProvince string               `protobuf:"bytes,6,opt,name=em_contact_province,json=emContactProvince,proto3" json:"em_contact_province"`
	EmContactCounty   string               `protobuf:"bytes,7,opt,name=em_contact_county,json=emContactCounty,proto3" json:"em_contact_county"`
	EmContactAddress  string               `protobuf:"bytes,8,opt,name=em_contact_address,json=emContactAddress,proto3" json:"em_contact_address"`
	EmContactAreaCode int32                `protobuf:"varint,9,opt,name=em_contact_area_code,json=emContactAreaCode,proto3" json:"em_contact_area_code"`
	EmAvatar          string               `protobuf:"bytes,10,opt,name=em_avatar,json=emAvatar,proto3" json:"em_avatar"`
	EmName            string               `protobuf:"bytes,11,opt,name=em_name,json=emName,proto3" json:"em_name"`
	EmRemark          string               `protobuf:"bytes,12,opt,name=em_remark,json=emRemark,proto3" json:"em_remark"`
	UnionId           string               `protobuf:"bytes,13,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	EmWeixinOpenId    string               `protobuf:"bytes,14,opt,name=em_weixin_open_id,json=emWeixinOpenId,proto3" json:"em_weixin_open_id"`
	EmUserId          string               `protobuf:"bytes,15,opt,name=em_user_id,json=emUserId,proto3" json:"em_user_id"`
	EmYzOpenId        string               `protobuf:"bytes,16,opt,name=em_yz_open_id,json=emYzOpenId,proto3" json:"em_yz_open_id"`
	EmGrowth          int32                `protobuf:"varint,17,opt,name=em_growth,json=emGrowth,proto3" json:"em_growth"`
	EmPoints          int32                `protobuf:"varint,18,opt,name=em_points,json=emPoints,proto3" json:"em_points"`
	EmTradedNum       int32                `protobuf:"varint,19,opt,name=em_traded_num,json=emTradedNum,proto3" json:"em_traded_num"`
	EmTradedMoney     float32              `protobuf:"fixed32,20,opt,name=em_traded_money,json=emTradedMoney,proto3" json:"em_traded_money"`
	EmIsMember        bool                 `protobuf:"varint,21,opt,name=em_is_member,json=emIsMember,proto3" json:"em_is_member"`
	EmOuterUid        string               `protobuf:"bytes,22,opt,name=em_outer_uid,json=emOuterUid,proto3" json:"em_outer_uid"`
	OuterId           string               `protobuf:"bytes,23,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`
	CustId            uint32               `protobuf:"varint,24,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustEmInfoRsp) Reset() {
	*x = GetCustEmInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustEmInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustEmInfoRsp) ProtoMessage() {}

func (x *GetCustEmInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustEmInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCustEmInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{9}
}

func (x *GetCustEmInfoRsp) GetEmRegisterPhone() string {
	if x != nil {
		return x.EmRegisterPhone
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmAccountId() string {
	if x != nil {
		return x.EmAccountId
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmBirthday() *timestamp.Timestamp {
	if x != nil {
		return x.EmBirthday
	}
	return nil
}

func (x *GetCustEmInfoRsp) GetEmGender() int32 {
	if x != nil {
		return x.EmGender
	}
	return 0
}

func (x *GetCustEmInfoRsp) GetEmContactCity() string {
	if x != nil {
		return x.EmContactCity
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmContactProvince() string {
	if x != nil {
		return x.EmContactProvince
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmContactCounty() string {
	if x != nil {
		return x.EmContactCounty
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmContactAddress() string {
	if x != nil {
		return x.EmContactAddress
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmContactAreaCode() int32 {
	if x != nil {
		return x.EmContactAreaCode
	}
	return 0
}

func (x *GetCustEmInfoRsp) GetEmAvatar() string {
	if x != nil {
		return x.EmAvatar
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmRemark() string {
	if x != nil {
		return x.EmRemark
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmWeixinOpenId() string {
	if x != nil {
		return x.EmWeixinOpenId
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmUserId() string {
	if x != nil {
		return x.EmUserId
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmYzOpenId() string {
	if x != nil {
		return x.EmYzOpenId
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetEmGrowth() int32 {
	if x != nil {
		return x.EmGrowth
	}
	return 0
}

func (x *GetCustEmInfoRsp) GetEmPoints() int32 {
	if x != nil {
		return x.EmPoints
	}
	return 0
}

func (x *GetCustEmInfoRsp) GetEmTradedNum() int32 {
	if x != nil {
		return x.EmTradedNum
	}
	return 0
}

func (x *GetCustEmInfoRsp) GetEmTradedMoney() float32 {
	if x != nil {
		return x.EmTradedMoney
	}
	return 0
}

func (x *GetCustEmInfoRsp) GetEmIsMember() bool {
	if x != nil {
		return x.EmIsMember
	}
	return false
}

func (x *GetCustEmInfoRsp) GetEmOuterUid() string {
	if x != nil {
		return x.EmOuterUid
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *GetCustEmInfoRsp) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustMbInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MbOpenId         string               `protobuf:"bytes,1,opt,name=mb_open_id,json=mbOpenId,proto3" json:"mb_open_id"`
	MbMemberId       int32                `protobuf:"varint,2,opt,name=mb_member_id,json=mbMemberId,proto3" json:"mb_member_id"`
	MbBindPhone      string               `protobuf:"bytes,3,opt,name=mb_bind_phone,json=mbBindPhone,proto3" json:"mb_bind_phone"`
	MbBindTime       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=mb_bind_time,json=mbBindTime,proto3" json:"mb_bind_time"`
	MbAuthTime       *timestamp.Timestamp `protobuf:"bytes,5,opt,name=mb_auth_time,json=mbAuthTime,proto3" json:"mb_auth_time"`
	MbBindMobileTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=mb_bind_mobile_time,json=mbBindMobileTime,proto3" json:"mb_bind_mobile_time"`
	MbLevel          int32                `protobuf:"varint,8,opt,name=mb_level,json=mbLevel,proto3" json:"mb_level"`
	MbHeadImageUrl   string               `protobuf:"bytes,9,opt,name=mb_head_image_url,json=mbHeadImageUrl,proto3" json:"mb_head_image_url"`
	MbNickName       string               `protobuf:"bytes,10,opt,name=mb_nick_name,json=mbNickName,proto3" json:"mb_nick_name"`
	MbSex            int32                `protobuf:"varint,11,opt,name=mb_sex,json=mbSex,proto3" json:"mb_sex"`
	MbCity           string               `protobuf:"bytes,12,opt,name=mb_city,json=mbCity,proto3" json:"mb_city"`
	MbProvince       string               `protobuf:"bytes,13,opt,name=mb_province,json=mbProvince,proto3" json:"mb_province"`
	MbPhone          string               `protobuf:"bytes,14,opt,name=mb_phone,json=mbPhone,proto3" json:"mb_phone"`
	UnionId          string               `protobuf:"bytes,15,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	CustId           uint32               `protobuf:"varint,16,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustMbInfoRsp) Reset() {
	*x = GetCustMbInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustMbInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustMbInfoRsp) ProtoMessage() {}

func (x *GetCustMbInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustMbInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCustMbInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{10}
}

func (x *GetCustMbInfoRsp) GetMbOpenId() string {
	if x != nil {
		return x.MbOpenId
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetMbMemberId() int32 {
	if x != nil {
		return x.MbMemberId
	}
	return 0
}

func (x *GetCustMbInfoRsp) GetMbBindPhone() string {
	if x != nil {
		return x.MbBindPhone
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetMbBindTime() *timestamp.Timestamp {
	if x != nil {
		return x.MbBindTime
	}
	return nil
}

func (x *GetCustMbInfoRsp) GetMbAuthTime() *timestamp.Timestamp {
	if x != nil {
		return x.MbAuthTime
	}
	return nil
}

func (x *GetCustMbInfoRsp) GetMbBindMobileTime() *timestamp.Timestamp {
	if x != nil {
		return x.MbBindMobileTime
	}
	return nil
}

func (x *GetCustMbInfoRsp) GetMbLevel() int32 {
	if x != nil {
		return x.MbLevel
	}
	return 0
}

func (x *GetCustMbInfoRsp) GetMbHeadImageUrl() string {
	if x != nil {
		return x.MbHeadImageUrl
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetMbNickName() string {
	if x != nil {
		return x.MbNickName
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetMbSex() int32 {
	if x != nil {
		return x.MbSex
	}
	return 0
}

func (x *GetCustMbInfoRsp) GetMbCity() string {
	if x != nil {
		return x.MbCity
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetMbProvince() string {
	if x != nil {
		return x.MbProvince
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetMbPhone() string {
	if x != nil {
		return x.MbPhone
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *GetCustMbInfoRsp) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustDzInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DzWeixinId        string                   `protobuf:"bytes,1,opt,name=dz_weixin_id,json=dzWeixinId,proto3" json:"dz_weixin_id"`
	DzAlias           string                   `protobuf:"bytes,2,opt,name=dz_alias,json=dzAlias,proto3" json:"dz_alias"`
	DzNickName        string                   `protobuf:"bytes,3,opt,name=dz_nick_name,json=dzNickName,proto3" json:"dz_nick_name"`
	DzPyInitial       string                   `protobuf:"bytes,4,opt,name=dz_py_initial,json=dzPyInitial,proto3" json:"dz_py_initial"`
	DzQuanPin         string                   `protobuf:"bytes,5,opt,name=dz_quan_pin,json=dzQuanPin,proto3" json:"dz_quan_pin"`
	DzThumbHeadUrl    string                   `protobuf:"bytes,6,opt,name=dz_thumb_head_url,json=dzThumbHeadUrl,proto3" json:"dz_thumb_head_url"`
	DzCustSignature   string                   `protobuf:"bytes,7,opt,name=dz_cust_signature,json=dzCustSignature,proto3" json:"dz_cust_signature"`
	DzCustProvince    string                   `protobuf:"bytes,8,opt,name=dz_cust_province,json=dzCustProvince,proto3" json:"dz_cust_province"`
	DzCustCity        string                   `protobuf:"bytes,9,opt,name=dz_cust_city,json=dzCustCity,proto3" json:"dz_cust_city"`
	DzCustAddress     string                   `protobuf:"bytes,10,opt,name=dz_cust_address,json=dzCustAddress,proto3" json:"dz_cust_address"`
	DzCustHeadUrlHash string                   `protobuf:"bytes,11,opt,name=dz_cust_head_url_hash,json=dzCustHeadUrlHash,proto3" json:"dz_cust_head_url_hash"`
	CustId            uint32                   `protobuf:"varint,15,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
	List              []*GetCustDzInfoRsp_List `protobuf:"bytes,16,rep,name=list,proto3" json:"list"`
}

func (x *GetCustDzInfoRsp) Reset() {
	*x = GetCustDzInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustDzInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustDzInfoRsp) ProtoMessage() {}

func (x *GetCustDzInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustDzInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCustDzInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{11}
}

func (x *GetCustDzInfoRsp) GetDzWeixinId() string {
	if x != nil {
		return x.DzWeixinId
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzAlias() string {
	if x != nil {
		return x.DzAlias
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzNickName() string {
	if x != nil {
		return x.DzNickName
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzPyInitial() string {
	if x != nil {
		return x.DzPyInitial
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzQuanPin() string {
	if x != nil {
		return x.DzQuanPin
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzThumbHeadUrl() string {
	if x != nil {
		return x.DzThumbHeadUrl
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzCustSignature() string {
	if x != nil {
		return x.DzCustSignature
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzCustProvince() string {
	if x != nil {
		return x.DzCustProvince
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzCustCity() string {
	if x != nil {
		return x.DzCustCity
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzCustAddress() string {
	if x != nil {
		return x.DzCustAddress
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetDzCustHeadUrlHash() string {
	if x != nil {
		return x.DzCustHeadUrlHash
	}
	return ""
}

func (x *GetCustDzInfoRsp) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *GetCustDzInfoRsp) GetList() []*GetCustDzInfoRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetCustSalesOwnerHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustId    uint32 `protobuf:"varint,1,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
	OwnerFrom string `protobuf:"bytes,2,opt,name=owner_from,json=ownerFrom,proto3" json:"owner_from"`
}

func (x *GetCustSalesOwnerHistoryReq) Reset() {
	*x = GetCustSalesOwnerHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustSalesOwnerHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustSalesOwnerHistoryReq) ProtoMessage() {}

func (x *GetCustSalesOwnerHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustSalesOwnerHistoryReq.ProtoReflect.Descriptor instead.
func (*GetCustSalesOwnerHistoryReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{12}
}

func (x *GetCustSalesOwnerHistoryReq) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *GetCustSalesOwnerHistoryReq) GetOwnerFrom() string {
	if x != nil {
		return x.OwnerFrom
	}
	return ""
}

type GetCustSalesOwnerHistoryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetCustSalesOwnerHistoryRsp_List `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *GetCustSalesOwnerHistoryRsp) Reset() {
	*x = GetCustSalesOwnerHistoryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustSalesOwnerHistoryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustSalesOwnerHistoryRsp) ProtoMessage() {}

func (x *GetCustSalesOwnerHistoryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustSalesOwnerHistoryRsp.ProtoReflect.Descriptor instead.
func (*GetCustSalesOwnerHistoryRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{13}
}

func (x *GetCustSalesOwnerHistoryRsp) GetList() []*GetCustSalesOwnerHistoryRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetCustOrderRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32 `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	CustId    uint32 `protobuf:"varint,3,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustOrderRecordsReq) Reset() {
	*x = GetCustOrderRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustOrderRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustOrderRecordsReq) ProtoMessage() {}

func (x *GetCustOrderRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustOrderRecordsReq.ProtoReflect.Descriptor instead.
func (*GetCustOrderRecordsReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{14}
}

func (x *GetCustOrderRecordsReq) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetCustOrderRecordsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustOrderRecordsReq) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustOrderRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                         `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32                         `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Total     uint32                         `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	List      []*GetCustOrderRecordsRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *GetCustOrderRecordsRsp) Reset() {
	*x = GetCustOrderRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustOrderRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustOrderRecordsRsp) ProtoMessage() {}

func (x *GetCustOrderRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustOrderRecordsRsp.ProtoReflect.Descriptor instead.
func (*GetCustOrderRecordsRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{15}
}

func (x *GetCustOrderRecordsRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetCustOrderRecordsRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustOrderRecordsRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCustOrderRecordsRsp) GetList() []*GetCustOrderRecordsRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetCustActionRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32 `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	CustId    uint32 `protobuf:"varint,3,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustActionRecordsReq) Reset() {
	*x = GetCustActionRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustActionRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustActionRecordsReq) ProtoMessage() {}

func (x *GetCustActionRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustActionRecordsReq.ProtoReflect.Descriptor instead.
func (*GetCustActionRecordsReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{16}
}

func (x *GetCustActionRecordsReq) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetCustActionRecordsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustActionRecordsReq) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustScanRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32 `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	CustId    uint32 `protobuf:"varint,3,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustScanRecordsReq) Reset() {
	*x = GetCustScanRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustScanRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustScanRecordsReq) ProtoMessage() {}

func (x *GetCustScanRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustScanRecordsReq.ProtoReflect.Descriptor instead.
func (*GetCustScanRecordsReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{17}
}

func (x *GetCustScanRecordsReq) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetCustScanRecordsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustScanRecordsReq) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustActionRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                          `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32                          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Total     uint32                          `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	List      []*GetCustActionRecordsRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *GetCustActionRecordsRsp) Reset() {
	*x = GetCustActionRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustActionRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustActionRecordsRsp) ProtoMessage() {}

func (x *GetCustActionRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustActionRecordsRsp.ProtoReflect.Descriptor instead.
func (*GetCustActionRecordsRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{18}
}

func (x *GetCustActionRecordsRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetCustActionRecordsRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustActionRecordsRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCustActionRecordsRsp) GetList() []*GetCustActionRecordsRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetCustScanRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                        `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize  uint32                        `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Total     uint32                        `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	List      []*GetCustScanRecordsRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *GetCustScanRecordsRsp) Reset() {
	*x = GetCustScanRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustScanRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustScanRecordsRsp) ProtoMessage() {}

func (x *GetCustScanRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustScanRecordsRsp.ProtoReflect.Descriptor instead.
func (*GetCustScanRecordsRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{19}
}

func (x *GetCustScanRecordsRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetCustScanRecordsRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustScanRecordsRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCustScanRecordsRsp) GetList() []*GetCustScanRecordsRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type SyncHistoryInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
}

func (x *SyncHistoryInfoRsp) Reset() {
	*x = SyncHistoryInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncHistoryInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncHistoryInfoRsp) ProtoMessage() {}

func (x *SyncHistoryInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncHistoryInfoRsp.ProtoReflect.Descriptor instead.
func (*SyncHistoryInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{20}
}

func (x *SyncHistoryInfoRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SetCustSalesOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAccountId   int32  `protobuf:"varint,1,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`
	OwnerAccountName string `protobuf:"bytes,2,opt,name=owner_account_name,json=ownerAccountName,proto3" json:"owner_account_name"`
	OwnerFrom        string `protobuf:"bytes,3,opt,name=owner_from,json=ownerFrom,proto3" json:"owner_from"`
	CustId           uint32 `protobuf:"varint,4,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *SetCustSalesOwnerReq) Reset() {
	*x = SetCustSalesOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCustSalesOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustSalesOwnerReq) ProtoMessage() {}

func (x *SetCustSalesOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustSalesOwnerReq.ProtoReflect.Descriptor instead.
func (*SetCustSalesOwnerReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{21}
}

func (x *SetCustSalesOwnerReq) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *SetCustSalesOwnerReq) GetOwnerAccountName() string {
	if x != nil {
		return x.OwnerAccountName
	}
	return ""
}

func (x *SetCustSalesOwnerReq) GetOwnerFrom() string {
	if x != nil {
		return x.OwnerFrom
	}
	return ""
}

func (x *SetCustSalesOwnerReq) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type SetCustSalesOwnerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
}

func (x *SetCustSalesOwnerRsp) Reset() {
	*x = SetCustSalesOwnerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCustSalesOwnerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustSalesOwnerRsp) ProtoMessage() {}

func (x *SetCustSalesOwnerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustSalesOwnerRsp.ProtoReflect.Descriptor instead.
func (*SetCustSalesOwnerRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{22}
}

func (x *SetCustSalesOwnerRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetCustChannelInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustId               uint32               `protobuf:"varint,1,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
	UnionId              string               `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	PaOpenId             string               `protobuf:"bytes,3,opt,name=pa_open_id,json=paOpenId,proto3" json:"pa_open_id"`
	PaSubscribed         bool                 `protobuf:"varint,4,opt,name=pa_subscribed,json=paSubscribed,proto3" json:"pa_subscribed"`
	PaFirstSubscribeTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=pa_first_subscribe_time,json=paFirstSubscribeTime,proto3" json:"pa_first_subscribe_time"`
	PaLastSubscribeTime  *timestamp.Timestamp `protobuf:"bytes,6,opt,name=pa_last_subscribe_time,json=paLastSubscribeTime,proto3" json:"pa_last_subscribe_time"`
	MbOpenId             string               `protobuf:"bytes,7,opt,name=mb_open_id,json=mbOpenId,proto3" json:"mb_open_id"`
	MbBindPhone          string               `protobuf:"bytes,8,opt,name=mb_bind_phone,json=mbBindPhone,proto3" json:"mb_bind_phone"`
	MbBindTime           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=mb_bind_time,json=mbBindTime,proto3" json:"mb_bind_time"`
	DzWeixinId           string               `protobuf:"bytes,10,opt,name=dz_weixin_id,json=dzWeixinId,proto3" json:"dz_weixin_id"`
	OwnerAccountId       int32                `protobuf:"varint,11,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`
	OwnerAccountName     string               `protobuf:"bytes,12,opt,name=owner_account_name,json=ownerAccountName,proto3" json:"owner_account_name"`
}

func (x *GetCustChannelInfoRsp) Reset() {
	*x = GetCustChannelInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustChannelInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustChannelInfoRsp) ProtoMessage() {}

func (x *GetCustChannelInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustChannelInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCustChannelInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{23}
}

func (x *GetCustChannelInfoRsp) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *GetCustChannelInfoRsp) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *GetCustChannelInfoRsp) GetPaOpenId() string {
	if x != nil {
		return x.PaOpenId
	}
	return ""
}

func (x *GetCustChannelInfoRsp) GetPaSubscribed() bool {
	if x != nil {
		return x.PaSubscribed
	}
	return false
}

func (x *GetCustChannelInfoRsp) GetPaFirstSubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaFirstSubscribeTime
	}
	return nil
}

func (x *GetCustChannelInfoRsp) GetPaLastSubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaLastSubscribeTime
	}
	return nil
}

func (x *GetCustChannelInfoRsp) GetMbOpenId() string {
	if x != nil {
		return x.MbOpenId
	}
	return ""
}

func (x *GetCustChannelInfoRsp) GetMbBindPhone() string {
	if x != nil {
		return x.MbBindPhone
	}
	return ""
}

func (x *GetCustChannelInfoRsp) GetMbBindTime() *timestamp.Timestamp {
	if x != nil {
		return x.MbBindTime
	}
	return nil
}

func (x *GetCustChannelInfoRsp) GetDzWeixinId() string {
	if x != nil {
		return x.DzWeixinId
	}
	return ""
}

func (x *GetCustChannelInfoRsp) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *GetCustChannelInfoRsp) GetOwnerAccountName() string {
	if x != nil {
		return x.OwnerAccountName
	}
	return ""
}

type GetCustBasicInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadImageUrl     string `protobuf:"bytes,1,opt,name=head_image_url,json=headImageUrl,proto3" json:"head_image_url"`
	HeadHash         string `protobuf:"bytes,2,opt,name=head_hash,json=headHash,proto3" json:"head_hash"`
	NickName         string `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name"`
	Gender           int32  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender"`
	Phone            string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone"`
	Country          string `protobuf:"bytes,6,opt,name=country,proto3" json:"country"`
	Province         string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City             string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	District         string `protobuf:"bytes,9,opt,name=district,proto3" json:"district"`
	Address          string `protobuf:"bytes,10,opt,name=address,proto3" json:"address"`
	Birthday         string `protobuf:"bytes,11,opt,name=birthday,proto3" json:"birthday"`
	UnionId          string `protobuf:"bytes,12,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	CreatedBy        string `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by"`
	OwnerAccountId   int32  `protobuf:"varint,14,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`
	OwnerAccountName string `protobuf:"bytes,15,opt,name=owner_account_name,json=ownerAccountName,proto3" json:"owner_account_name"`
	OwnerFrom        string `protobuf:"bytes,16,opt,name=owner_from,json=ownerFrom,proto3" json:"owner_from"`
}

func (x *GetCustBasicInfoRsp) Reset() {
	*x = GetCustBasicInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustBasicInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustBasicInfoRsp) ProtoMessage() {}

func (x *GetCustBasicInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustBasicInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCustBasicInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{24}
}

func (x *GetCustBasicInfoRsp) GetHeadImageUrl() string {
	if x != nil {
		return x.HeadImageUrl
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetHeadHash() string {
	if x != nil {
		return x.HeadHash
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *GetCustBasicInfoRsp) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *GetCustBasicInfoRsp) GetOwnerAccountName() string {
	if x != nil {
		return x.OwnerAccountName
	}
	return ""
}

func (x *GetCustBasicInfoRsp) GetOwnerFrom() string {
	if x != nil {
		return x.OwnerFrom
	}
	return ""
}

type SearchCustRefundOrderRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex       uint32               `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`                            //页码
	PageSize        uint32               `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`                               //每页返回数量
	CardAliases     []string             `protobuf:"bytes,3,rep,name=card_aliases,json=cardAliases,proto3" json:"card_aliases"`                       //会员卡类型
	IsWechatFriend  int32                `protobuf:"varint,4,opt,name=is_wechat_friend,json=isWechatFriend,proto3" json:"is_wechat_friend"`           //是否微信好友 0全部 1是 2不是
	OwnerAccountIds []int32              `protobuf:"varint,5,rep,packed,name=owner_account_ids,json=ownerAccountIds,proto3" json:"owner_account_ids"` //业绩归属账号ID
	Status          string               `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`                                                    //售后单状态
	ApplyStartTime  *timestamp.Timestamp `protobuf:"bytes,7,opt,name=apply_start_time,json=applyStartTime,proto3" json:"apply_start_time"`            //售后申请开始时间
	ApplyEndTime    *timestamp.Timestamp `protobuf:"bytes,8,opt,name=apply_end_time,json=applyEndTime,proto3" json:"apply_end_time"`                  //售后申请截止时间
	FinishStartTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=finish_start_time,json=finishStartTime,proto3" json:"finish_start_time"`         //售后完成开始时间
	FinishEndTime   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=finish_end_time,json=finishEndTime,proto3" json:"finish_end_time"`              //售后完成截止时间
	EmName          string               `protobuf:"bytes,11,opt,name=em_name,json=emName,proto3" json:"em_name"`                                     //商城昵称
	Tid             string               `protobuf:"bytes,12,opt,name=tid,proto3" json:"tid"`                                                         //订单号
	OuterId         string               `protobuf:"bytes,13,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`                                  //商城用户编号
	ReturnId        string               `protobuf:"bytes,14,opt,name=return_id,json=returnId,proto3" json:"return_id"`                               //售后单号
}

func (x *SearchCustRefundOrderRecordsReq) Reset() {
	*x = SearchCustRefundOrderRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustRefundOrderRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustRefundOrderRecordsReq) ProtoMessage() {}

func (x *SearchCustRefundOrderRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustRefundOrderRecordsReq.ProtoReflect.Descriptor instead.
func (*SearchCustRefundOrderRecordsReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{25}
}

func (x *SearchCustRefundOrderRecordsReq) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsReq) GetCardAliases() []string {
	if x != nil {
		return x.CardAliases
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsReq) GetIsWechatFriend() int32 {
	if x != nil {
		return x.IsWechatFriend
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsReq) GetOwnerAccountIds() []int32 {
	if x != nil {
		return x.OwnerAccountIds
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsReq) GetApplyStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.ApplyStartTime
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsReq) GetApplyEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.ApplyEndTime
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsReq) GetFinishStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.FinishStartTime
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsReq) GetFinishEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.FinishEndTime
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsReq) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsReq) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsReq) GetReturnId() string {
	if x != nil {
		return x.ReturnId
	}
	return ""
}

type SearchCustRefundOrderRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                                  `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"` //页码
	PageSize  uint32                                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`    //每页返回数量
	Total     uint32                                  `protobuf:"varint,3,opt,name=total,proto3" json:"total"`                          //总条数
	List      []*SearchCustRefundOrderRecordsRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *SearchCustRefundOrderRecordsRsp) Reset() {
	*x = SearchCustRefundOrderRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustRefundOrderRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustRefundOrderRecordsRsp) ProtoMessage() {}

func (x *SearchCustRefundOrderRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustRefundOrderRecordsRsp.ProtoReflect.Descriptor instead.
func (*SearchCustRefundOrderRecordsRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{26}
}

func (x *SearchCustRefundOrderRecordsRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsRsp) GetList() []*SearchCustRefundOrderRecordsRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type SearchCustOrderRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex        uint32               `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize         uint32               `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	CardAliases      []string             `protobuf:"bytes,3,rep,name=card_aliases,json=cardAliases,proto3" json:"card_aliases"`                       //会员卡类型
	IsWechatFriend   int32                `protobuf:"varint,4,opt,name=is_wechat_friend,json=isWechatFriend,proto3" json:"is_wechat_friend"`           //是否微信好友 0全部 1是 2不是
	OwnerAccountIds  []int32              `protobuf:"varint,5,rep,packed,name=owner_account_ids,json=ownerAccountIds,proto3" json:"owner_account_ids"` //业绩归属账号ID
	Status           string               `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`                                                    //订单状态
	OrderStartTime   *timestamp.Timestamp `protobuf:"bytes,7,opt,name=order_start_time,json=orderStartTime,proto3" json:"order_start_time"`            //订单创建开始时间
	OrderEndTime     *timestamp.Timestamp `protobuf:"bytes,8,opt,name=order_end_time,json=orderEndTime,proto3" json:"order_end_time"`                  //订单创建结束时间
	PaymentStartTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=payment_start_time,json=paymentStartTime,proto3" json:"payment_start_time"`      //订单支付开始时间
	PaymentEndTime   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=payment_end_time,json=paymentEndTime,proto3" json:"payment_end_time"`           //订单支付结束时间
	CustId           uint32               `protobuf:"varint,11,opt,name=cust_id,json=custId,proto3" json:"cust_id"`                                    //基础服务客户ID
	Tid              string               `protobuf:"bytes,12,opt,name=tid,proto3" json:"tid"`                                                         //订单号
	EmName           string               `protobuf:"bytes,13,opt,name=em_name,json=emName,proto3" json:"em_name"`                                     //客户昵称
	OuterId          string               `protobuf:"bytes,14,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`                                  //商城用户编号
	DeliveryPhone    string               `protobuf:"bytes,15,opt,name=delivery_phone,json=deliveryPhone,proto3" json:"delivery_phone"`                //收货人手机号（暂无）
	DeliveryName     string               `protobuf:"bytes,16,opt,name=delivery_name,json=deliveryName,proto3" json:"delivery_name"`                   //收货人名字（暂无）
}

func (x *SearchCustOrderRecordsReq) Reset() {
	*x = SearchCustOrderRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustOrderRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustOrderRecordsReq) ProtoMessage() {}

func (x *SearchCustOrderRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustOrderRecordsReq.ProtoReflect.Descriptor instead.
func (*SearchCustOrderRecordsReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{27}
}

func (x *SearchCustOrderRecordsReq) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *SearchCustOrderRecordsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCustOrderRecordsReq) GetCardAliases() []string {
	if x != nil {
		return x.CardAliases
	}
	return nil
}

func (x *SearchCustOrderRecordsReq) GetIsWechatFriend() int32 {
	if x != nil {
		return x.IsWechatFriend
	}
	return 0
}

func (x *SearchCustOrderRecordsReq) GetOwnerAccountIds() []int32 {
	if x != nil {
		return x.OwnerAccountIds
	}
	return nil
}

func (x *SearchCustOrderRecordsReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchCustOrderRecordsReq) GetOrderStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.OrderStartTime
	}
	return nil
}

func (x *SearchCustOrderRecordsReq) GetOrderEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.OrderEndTime
	}
	return nil
}

func (x *SearchCustOrderRecordsReq) GetPaymentStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaymentStartTime
	}
	return nil
}

func (x *SearchCustOrderRecordsReq) GetPaymentEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaymentEndTime
	}
	return nil
}

func (x *SearchCustOrderRecordsReq) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *SearchCustOrderRecordsReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SearchCustOrderRecordsReq) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *SearchCustOrderRecordsReq) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *SearchCustOrderRecordsReq) GetDeliveryPhone() string {
	if x != nil {
		return x.DeliveryPhone
	}
	return ""
}

func (x *SearchCustOrderRecordsReq) GetDeliveryName() string {
	if x != nil {
		return x.DeliveryName
	}
	return ""
}

type SearchCustOrderRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                            `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"` //页码
	PageSize  uint32                            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`    //每页返回数量
	Total     uint32                            `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	List      []*SearchCustOrderRecordsRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *SearchCustOrderRecordsRsp) Reset() {
	*x = SearchCustOrderRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustOrderRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustOrderRecordsRsp) ProtoMessage() {}

func (x *SearchCustOrderRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustOrderRecordsRsp.ProtoReflect.Descriptor instead.
func (*SearchCustOrderRecordsRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{28}
}

func (x *SearchCustOrderRecordsRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp) GetList() []*SearchCustOrderRecordsRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetCustOrderRefundDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnId string `protobuf:"bytes,1,opt,name=return_id,json=returnId,proto3" json:"return_id"` //售后单号
}

func (x *GetCustOrderRefundDetailReq) Reset() {
	*x = GetCustOrderRefundDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustOrderRefundDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustOrderRefundDetailReq) ProtoMessage() {}

func (x *GetCustOrderRefundDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustOrderRefundDetailReq.ProtoReflect.Descriptor instead.
func (*GetCustOrderRefundDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{29}
}

func (x *GetCustOrderRefundDetailReq) GetReturnId() string {
	if x != nil {
		return x.ReturnId
	}
	return ""
}

type GetCustOrderDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"` //订单单号
}

func (x *GetCustOrderDetailReq) Reset() {
	*x = GetCustOrderDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustOrderDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustOrderDetailReq) ProtoMessage() {}

func (x *GetCustOrderDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustOrderDetailReq.ProtoReflect.Descriptor instead.
func (*GetCustOrderDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{30}
}

func (x *GetCustOrderDetailReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

type GetCustOrderRefundDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid            string               `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`                                                 //订单号
	ReturnId       string               `protobuf:"bytes,2,opt,name=return_id,json=returnId,proto3" json:"return_id"`                       //售后单号
	Status         string               `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`                                           //售后单状态
	Created        *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created"`                                         //售后申请时间
	SuccessTime    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=success_time,json=successTime,proto3" json:"success_time"`              //售后完成时间
	TotalRefundAmt float32              `protobuf:"fixed32,7,opt,name=total_refund_amt,json=totalRefundAmt,proto3" json:"total_refund_amt"` //总退款额(退款金额+退款余额)
	OwnerAccountId int32                `protobuf:"varint,8,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`  //业绩归属账号ID
	OuterId        string               `protobuf:"bytes,9,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`                          //商城用户编号
	EmName         string               `protobuf:"bytes,10,opt,name=em_name,json=emName,proto3" json:"em_name"`                            //商城昵称
	Demand         int32                `protobuf:"varint,11,opt,name=demand,proto3" json:"demand"`                                         //售后单类型 1退货 2退物退货 3换货
	RefundFee      float32              `protobuf:"fixed32,12,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee"`                 // 退款金额
	RefundBalance  float32              `protobuf:"fixed32,13,opt,name=refund_balance,json=refundBalance,proto3" json:"refund_balance"`     //退款余额
}

func (x *GetCustOrderRefundDetailRsp) Reset() {
	*x = GetCustOrderRefundDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustOrderRefundDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustOrderRefundDetailRsp) ProtoMessage() {}

func (x *GetCustOrderRefundDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustOrderRefundDetailRsp.ProtoReflect.Descriptor instead.
func (*GetCustOrderRefundDetailRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{31}
}

func (x *GetCustOrderRefundDetailRsp) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetCustOrderRefundDetailRsp) GetReturnId() string {
	if x != nil {
		return x.ReturnId
	}
	return ""
}

func (x *GetCustOrderRefundDetailRsp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetCustOrderRefundDetailRsp) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetCustOrderRefundDetailRsp) GetSuccessTime() *timestamp.Timestamp {
	if x != nil {
		return x.SuccessTime
	}
	return nil
}

func (x *GetCustOrderRefundDetailRsp) GetTotalRefundAmt() float32 {
	if x != nil {
		return x.TotalRefundAmt
	}
	return 0
}

func (x *GetCustOrderRefundDetailRsp) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *GetCustOrderRefundDetailRsp) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *GetCustOrderRefundDetailRsp) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *GetCustOrderRefundDetailRsp) GetDemand() int32 {
	if x != nil {
		return x.Demand
	}
	return 0
}

func (x *GetCustOrderRefundDetailRsp) GetRefundFee() float32 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *GetCustOrderRefundDetailRsp) GetRefundBalance() float32 {
	if x != nil {
		return x.RefundBalance
	}
	return 0
}

type GetCustOrderDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid                string               `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`                                                             //订单编号
	ShopId             string               `protobuf:"bytes,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                         //商铺编号
	TotalAmount        float32              `protobuf:"fixed32,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`                        //订单总金额
	PayAmount          float32              `protobuf:"fixed32,4,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount"`                              //现金支付额
	BalanceDiscountAmt float32              `protobuf:"fixed32,5,opt,name=balance_discount_amt,json=balanceDiscountAmt,proto3" json:"balance_discount_amt"` //余额支付额
	TotalPayment       float32              `protobuf:"fixed32,6,opt,name=total_payment,json=totalPayment,proto3" json:"total_payment"`                     //支付总额(pay_amount+balance_discount_amt)
	DeliveryPhone      string               `protobuf:"bytes,7,opt,name=delivery_phone,json=deliveryPhone,proto3" json:"delivery_phone"`                    //收货人手机号（暂无）
	DeliveryName       string               `protobuf:"bytes,8,opt,name=delivery_name,json=deliveryName,proto3" json:"delivery_name"`                       //收货人名字（暂无）
	OwnerAccountId     int32                `protobuf:"varint,9,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`              //业绩归属账号ID
	Status             string               `protobuf:"bytes,10,opt,name=status,proto3" json:"status"`
	OrderTime          *timestamp.Timestamp `protobuf:"bytes,11,opt,name=order_time,json=orderTime,proto3" json:"order_time"`
	PayTime            *timestamp.Timestamp `protobuf:"bytes,12,opt,name=pay_time,json=payTime,proto3" json:"pay_time"`
	EmName             string               `protobuf:"bytes,13,opt,name=em_name,json=emName,proto3" json:"em_name"`             //客户昵称
	OuterId            string               `protobuf:"bytes,14,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`          //商城用户编号
	OrderItems         string               `protobuf:"bytes,15,opt,name=order_items,json=orderItems,proto3" json:"order_items"` //订单商品
	DeliveryAddress    string               `protobuf:"bytes,16,opt,name=delivery_address,json=deliveryAddress,proto3" json:"delivery_address"`
	IsRefund           bool                 `protobuf:"varint,17,opt,name=is_refund,json=isRefund,proto3" json:"is_refund"`                      //是否有售后
	TotalRefundAmt     float32              `protobuf:"fixed32,18,opt,name=total_refund_amt,json=totalRefundAmt,proto3" json:"total_refund_amt"` //退款总金额
	CustId             uint32               `protobuf:"varint,19,opt,name=cust_id,json=custId,proto3" json:"cust_id"`                            //基础服务客户ID
	RefundTime         *timestamp.Timestamp `protobuf:"bytes,20,opt,name=refund_time,json=refundTime,proto3" json:"refund_time"`                 //退款完成时间
	ConsignTime        *timestamp.Timestamp `protobuf:"bytes,21,opt,name=consign_time,json=consignTime,proto3" json:"consign_time"`              //发货时间
}

func (x *GetCustOrderDetailRsp) Reset() {
	*x = GetCustOrderDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustOrderDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustOrderDetailRsp) ProtoMessage() {}

func (x *GetCustOrderDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustOrderDetailRsp.ProtoReflect.Descriptor instead.
func (*GetCustOrderDetailRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{32}
}

func (x *GetCustOrderDetailRsp) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetShopId() string {
	if x != nil {
		return x.ShopId
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *GetCustOrderDetailRsp) GetPayAmount() float32 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

func (x *GetCustOrderDetailRsp) GetBalanceDiscountAmt() float32 {
	if x != nil {
		return x.BalanceDiscountAmt
	}
	return 0
}

func (x *GetCustOrderDetailRsp) GetTotalPayment() float32 {
	if x != nil {
		return x.TotalPayment
	}
	return 0
}

func (x *GetCustOrderDetailRsp) GetDeliveryPhone() string {
	if x != nil {
		return x.DeliveryPhone
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetDeliveryName() string {
	if x != nil {
		return x.DeliveryName
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *GetCustOrderDetailRsp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetOrderTime() *timestamp.Timestamp {
	if x != nil {
		return x.OrderTime
	}
	return nil
}

func (x *GetCustOrderDetailRsp) GetPayTime() *timestamp.Timestamp {
	if x != nil {
		return x.PayTime
	}
	return nil
}

func (x *GetCustOrderDetailRsp) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetOrderItems() string {
	if x != nil {
		return x.OrderItems
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetDeliveryAddress() string {
	if x != nil {
		return x.DeliveryAddress
	}
	return ""
}

func (x *GetCustOrderDetailRsp) GetIsRefund() bool {
	if x != nil {
		return x.IsRefund
	}
	return false
}

func (x *GetCustOrderDetailRsp) GetTotalRefundAmt() float32 {
	if x != nil {
		return x.TotalRefundAmt
	}
	return 0
}

func (x *GetCustOrderDetailRsp) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *GetCustOrderDetailRsp) GetRefundTime() *timestamp.Timestamp {
	if x != nil {
		return x.RefundTime
	}
	return nil
}

func (x *GetCustOrderDetailRsp) GetConsignTime() *timestamp.Timestamp {
	if x != nil {
		return x.ConsignTime
	}
	return nil
}

type GetPerformanceOrderRecordsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex       uint32               `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"`
	PageSize        uint32               `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Demand          int32                `protobuf:"varint,3,opt,name=demand,proto3" json:"demand"`                                                   //售后单类型 1退货 2退物退货 3换货
	OwnerAccountIds []int32              `protobuf:"varint,5,rep,packed,name=owner_account_ids,json=ownerAccountIds,proto3" json:"owner_account_ids"` //业绩归属账号ID
	StartTime       *timestamp.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time"`                             //订单创建开始时间
	EndTime         *timestamp.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time"`                                   //订单创建结束时间
}

func (x *GetPerformanceOrderRecordsReq) Reset() {
	*x = GetPerformanceOrderRecordsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceOrderRecordsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceOrderRecordsReq) ProtoMessage() {}

func (x *GetPerformanceOrderRecordsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceOrderRecordsReq.ProtoReflect.Descriptor instead.
func (*GetPerformanceOrderRecordsReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{33}
}

func (x *GetPerformanceOrderRecordsReq) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetPerformanceOrderRecordsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPerformanceOrderRecordsReq) GetDemand() int32 {
	if x != nil {
		return x.Demand
	}
	return 0
}

func (x *GetPerformanceOrderRecordsReq) GetOwnerAccountIds() []int32 {
	if x != nil {
		return x.OwnerAccountIds
	}
	return nil
}

func (x *GetPerformanceOrderRecordsReq) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetPerformanceOrderRecordsReq) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type GetPerformanceRefundOrderRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                                      `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"` //页码
	PageSize  uint32                                      `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`    //每页返回数量
	Total     uint32                                      `protobuf:"varint,3,opt,name=total,proto3" json:"total"`                          //总条数
	List      []*GetPerformanceRefundOrderRecordsRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *GetPerformanceRefundOrderRecordsRsp) Reset() {
	*x = GetPerformanceRefundOrderRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceRefundOrderRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceRefundOrderRecordsRsp) ProtoMessage() {}

func (x *GetPerformanceRefundOrderRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceRefundOrderRecordsRsp.ProtoReflect.Descriptor instead.
func (*GetPerformanceRefundOrderRecordsRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{34}
}

func (x *GetPerformanceRefundOrderRecordsRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetPerformanceRefundOrderRecordsRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPerformanceRefundOrderRecordsRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPerformanceRefundOrderRecordsRsp) GetList() []*GetPerformanceRefundOrderRecordsRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetPerformanceOrderRecordsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex uint32                                `protobuf:"varint,1,opt,name=page_index,json=pageIndex,proto3" json:"page_index"` //页码
	PageSize  uint32                                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`    //每页返回数量
	Total     uint32                                `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	List      []*GetPerformanceOrderRecordsRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *GetPerformanceOrderRecordsRsp) Reset() {
	*x = GetPerformanceOrderRecordsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceOrderRecordsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceOrderRecordsRsp) ProtoMessage() {}

func (x *GetPerformanceOrderRecordsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceOrderRecordsRsp.ProtoReflect.Descriptor instead.
func (*GetPerformanceOrderRecordsRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{35}
}

func (x *GetPerformanceOrderRecordsRsp) GetPageIndex() uint32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetPerformanceOrderRecordsRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPerformanceOrderRecordsRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPerformanceOrderRecordsRsp) GetList() []*GetPerformanceOrderRecordsRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetPerformanceSumDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetPerformanceSumDataRsp_List `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *GetPerformanceSumDataRsp) Reset() {
	*x = GetPerformanceSumDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceSumDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceSumDataRsp) ProtoMessage() {}

func (x *GetPerformanceSumDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceSumDataRsp.ProtoReflect.Descriptor instead.
func (*GetPerformanceSumDataRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{36}
}

func (x *GetPerformanceSumDataRsp) GetList() []*GetPerformanceSumDataRsp_List {
	if x != nil {
		return x.List
	}
	return nil
}

type ModifyPerformanceOrderOwnerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid            []string `protobuf:"bytes,1,rep,name=tid,proto3" json:"tid"`                                                // 订单号
	OwnerAccountId int32    `protobuf:"varint,2,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"` // 业绩归属店长ID
	LastModifiedBy int32    `protobuf:"varint,3,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by"` // 修改人ID
}

func (x *ModifyPerformanceOrderOwnerReq) Reset() {
	*x = ModifyPerformanceOrderOwnerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPerformanceOrderOwnerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPerformanceOrderOwnerReq) ProtoMessage() {}

func (x *ModifyPerformanceOrderOwnerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPerformanceOrderOwnerReq.ProtoReflect.Descriptor instead.
func (*ModifyPerformanceOrderOwnerReq) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{37}
}

func (x *ModifyPerformanceOrderOwnerReq) GetTid() []string {
	if x != nil {
		return x.Tid
	}
	return nil
}

func (x *ModifyPerformanceOrderOwnerReq) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *ModifyPerformanceOrderOwnerReq) GetLastModifiedBy() int32 {
	if x != nil {
		return x.LastModifiedBy
	}
	return 0
}

type ModifyPerformanceOrderOwnerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*ModifyPerformanceOrderOwnerRsp_Result `protobuf:"bytes,4,rep,name=result,proto3" json:"result"`
}

func (x *ModifyPerformanceOrderOwnerRsp) Reset() {
	*x = ModifyPerformanceOrderOwnerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPerformanceOrderOwnerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPerformanceOrderOwnerRsp) ProtoMessage() {}

func (x *ModifyPerformanceOrderOwnerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPerformanceOrderOwnerRsp.ProtoReflect.Descriptor instead.
func (*ModifyPerformanceOrderOwnerRsp) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{38}
}

func (x *ModifyPerformanceOrderOwnerRsp) GetResult() []*ModifyPerformanceOrderOwnerRsp_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type SearchCustEmInfoListRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmRegisterPhone    string               `protobuf:"bytes,1,opt,name=em_register_phone,json=emRegisterPhone,proto3" json:"em_register_phone"`
	EmAccountId        string               `protobuf:"bytes,2,opt,name=em_account_id,json=emAccountId,proto3" json:"em_account_id"`
	EmBirthday         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=em_birthday,json=emBirthday,proto3" json:"em_birthday"`
	EmGender           int32                `protobuf:"varint,4,opt,name=em_gender,json=emGender,proto3" json:"em_gender"`
	EmContactCity      string               `protobuf:"bytes,5,opt,name=em_contact_city,json=emContactCity,proto3" json:"em_contact_city"`
	EmContactProvince  string               `protobuf:"bytes,6,opt,name=em_contact_province,json=emContactProvince,proto3" json:"em_contact_province"`
	EmContactCounty    string               `protobuf:"bytes,7,opt,name=em_contact_county,json=emContactCounty,proto3" json:"em_contact_county"`
	EmContactAddress   string               `protobuf:"bytes,8,opt,name=em_contact_address,json=emContactAddress,proto3" json:"em_contact_address"`
	EmContactAreaCode  int32                `protobuf:"varint,9,opt,name=em_contact_area_code,json=emContactAreaCode,proto3" json:"em_contact_area_code"`
	EmAvatar           string               `protobuf:"bytes,10,opt,name=em_avatar,json=emAvatar,proto3" json:"em_avatar"`
	EmName             string               `protobuf:"bytes,11,opt,name=em_name,json=emName,proto3" json:"em_name"`
	EmRemark           string               `protobuf:"bytes,12,opt,name=em_remark,json=emRemark,proto3" json:"em_remark"`
	UnionId            string               `protobuf:"bytes,13,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	EmWeixinOpenId     string               `protobuf:"bytes,14,opt,name=em_weixin_open_id,json=emWeixinOpenId,proto3" json:"em_weixin_open_id"`
	EmUserId           string               `protobuf:"bytes,15,opt,name=em_user_id,json=emUserId,proto3" json:"em_user_id"`
	EmYzOpenId         string               `protobuf:"bytes,16,opt,name=em_yz_open_id,json=emYzOpenId,proto3" json:"em_yz_open_id"`
	EmGrowth           int32                `protobuf:"varint,17,opt,name=em_growth,json=emGrowth,proto3" json:"em_growth"`
	EmPoints           int32                `protobuf:"varint,18,opt,name=em_points,json=emPoints,proto3" json:"em_points"`
	EmTradedNum        int32                `protobuf:"varint,19,opt,name=em_traded_num,json=emTradedNum,proto3" json:"em_traded_num"`
	EmTradedMoney      float32              `protobuf:"fixed32,20,opt,name=em_traded_money,json=emTradedMoney,proto3" json:"em_traded_money"`
	EmIsMember         bool                 `protobuf:"varint,21,opt,name=em_is_member,json=emIsMember,proto3" json:"em_is_member"`
	CustId             uint32               `protobuf:"varint,22,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
	DzOwnerAccountId   int32                `protobuf:"varint,23,opt,name=dz_owner_account_id,json=dzOwnerAccountId,proto3" json:"dz_owner_account_id"`
	DzOwnerAccountName string               `protobuf:"bytes,24,opt,name=dz_owner_account_name,json=dzOwnerAccountName,proto3" json:"dz_owner_account_name"`
}

func (x *SearchCustEmInfoListRsp_List) Reset() {
	*x = SearchCustEmInfoListRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustEmInfoListRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustEmInfoListRsp_List) ProtoMessage() {}

func (x *SearchCustEmInfoListRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustEmInfoListRsp_List.ProtoReflect.Descriptor instead.
func (*SearchCustEmInfoListRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SearchCustEmInfoListRsp_List) GetEmRegisterPhone() string {
	if x != nil {
		return x.EmRegisterPhone
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmAccountId() string {
	if x != nil {
		return x.EmAccountId
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmBirthday() *timestamp.Timestamp {
	if x != nil {
		return x.EmBirthday
	}
	return nil
}

func (x *SearchCustEmInfoListRsp_List) GetEmGender() int32 {
	if x != nil {
		return x.EmGender
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetEmContactCity() string {
	if x != nil {
		return x.EmContactCity
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmContactProvince() string {
	if x != nil {
		return x.EmContactProvince
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmContactCounty() string {
	if x != nil {
		return x.EmContactCounty
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmContactAddress() string {
	if x != nil {
		return x.EmContactAddress
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmContactAreaCode() int32 {
	if x != nil {
		return x.EmContactAreaCode
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetEmAvatar() string {
	if x != nil {
		return x.EmAvatar
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmRemark() string {
	if x != nil {
		return x.EmRemark
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmWeixinOpenId() string {
	if x != nil {
		return x.EmWeixinOpenId
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmUserId() string {
	if x != nil {
		return x.EmUserId
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmYzOpenId() string {
	if x != nil {
		return x.EmYzOpenId
	}
	return ""
}

func (x *SearchCustEmInfoListRsp_List) GetEmGrowth() int32 {
	if x != nil {
		return x.EmGrowth
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetEmPoints() int32 {
	if x != nil {
		return x.EmPoints
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetEmTradedNum() int32 {
	if x != nil {
		return x.EmTradedNum
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetEmTradedMoney() float32 {
	if x != nil {
		return x.EmTradedMoney
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetEmIsMember() bool {
	if x != nil {
		return x.EmIsMember
	}
	return false
}

func (x *SearchCustEmInfoListRsp_List) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetDzOwnerAccountId() int32 {
	if x != nil {
		return x.DzOwnerAccountId
	}
	return 0
}

func (x *SearchCustEmInfoListRsp_List) GetDzOwnerAccountName() string {
	if x != nil {
		return x.DzOwnerAccountName
	}
	return ""
}

type SearchCustPaInfoListRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaOpenId                string               `protobuf:"bytes,1,opt,name=pa_open_id,json=paOpenId,proto3" json:"pa_open_id"`
	PaSubscribed            bool                 `protobuf:"varint,2,opt,name=pa_subscribed,json=paSubscribed,proto3" json:"pa_subscribed"`
	PaHeadImageUrl          string               `protobuf:"bytes,3,opt,name=pa_head_image_url,json=paHeadImageUrl,proto3" json:"pa_head_image_url"`
	PaNickName              string               `protobuf:"bytes,4,opt,name=pa_nick_name,json=paNickName,proto3" json:"pa_nick_name"`
	PaSex                   int32                `protobuf:"varint,5,opt,name=pa_sex,json=paSex,proto3" json:"pa_sex"`
	PaCountry               string               `protobuf:"bytes,6,opt,name=pa_country,json=paCountry,proto3" json:"pa_country"`
	PaCity                  string               `protobuf:"bytes,7,opt,name=pa_city,json=paCity,proto3" json:"pa_city"`
	PaProvince              string               `protobuf:"bytes,8,opt,name=pa_province,json=paProvince,proto3" json:"pa_province"`
	PaRemark                string               `protobuf:"bytes,9,opt,name=pa_remark,json=paRemark,proto3" json:"pa_remark"`
	PaLanguage              string               `protobuf:"bytes,10,opt,name=pa_language,json=paLanguage,proto3" json:"pa_language"`
	PaUnsubscribeTime       *timestamp.Timestamp `protobuf:"bytes,11,opt,name=pa_unsubscribe_time,json=paUnsubscribeTime,proto3" json:"pa_unsubscribe_time"`
	PaFirstSubscibeScene    string               `protobuf:"bytes,12,opt,name=pa_first_subscibe_scene,json=paFirstSubscibeScene,proto3" json:"pa_first_subscibe_scene"`
	PaFirstSubscirbeSceneId string               `protobuf:"bytes,13,opt,name=pa_first_subscirbe_scene_id,json=paFirstSubscirbeSceneId,proto3" json:"pa_first_subscirbe_scene_id"`
	PaFirstSubscribeTime    *timestamp.Timestamp `protobuf:"bytes,14,opt,name=pa_first_subscribe_time,json=paFirstSubscribeTime,proto3" json:"pa_first_subscribe_time"`
	PaLastSubscribeTime     *timestamp.Timestamp `protobuf:"bytes,15,opt,name=pa_last_subscribe_time,json=paLastSubscribeTime,proto3" json:"pa_last_subscribe_time"`
	PaLastSubscribeScene    string               `protobuf:"bytes,16,opt,name=pa_last_subscribe_scene,json=paLastSubscribeScene,proto3" json:"pa_last_subscribe_scene"`
	PaLastSubscribeSceneId  string               `protobuf:"bytes,17,opt,name=pa_last_subscribe_scene_id,json=paLastSubscribeSceneId,proto3" json:"pa_last_subscribe_scene_id"`
	UnionId                 string               `protobuf:"bytes,18,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	CustId                  uint32               `protobuf:"varint,19,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *SearchCustPaInfoListRsp_List) Reset() {
	*x = SearchCustPaInfoListRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustPaInfoListRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustPaInfoListRsp_List) ProtoMessage() {}

func (x *SearchCustPaInfoListRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustPaInfoListRsp_List.ProtoReflect.Descriptor instead.
func (*SearchCustPaInfoListRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SearchCustPaInfoListRsp_List) GetPaOpenId() string {
	if x != nil {
		return x.PaOpenId
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaSubscribed() bool {
	if x != nil {
		return x.PaSubscribed
	}
	return false
}

func (x *SearchCustPaInfoListRsp_List) GetPaHeadImageUrl() string {
	if x != nil {
		return x.PaHeadImageUrl
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaNickName() string {
	if x != nil {
		return x.PaNickName
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaSex() int32 {
	if x != nil {
		return x.PaSex
	}
	return 0
}

func (x *SearchCustPaInfoListRsp_List) GetPaCountry() string {
	if x != nil {
		return x.PaCountry
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaCity() string {
	if x != nil {
		return x.PaCity
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaProvince() string {
	if x != nil {
		return x.PaProvince
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaRemark() string {
	if x != nil {
		return x.PaRemark
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaLanguage() string {
	if x != nil {
		return x.PaLanguage
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaUnsubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaUnsubscribeTime
	}
	return nil
}

func (x *SearchCustPaInfoListRsp_List) GetPaFirstSubscibeScene() string {
	if x != nil {
		return x.PaFirstSubscibeScene
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaFirstSubscirbeSceneId() string {
	if x != nil {
		return x.PaFirstSubscirbeSceneId
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaFirstSubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaFirstSubscribeTime
	}
	return nil
}

func (x *SearchCustPaInfoListRsp_List) GetPaLastSubscribeTime() *timestamp.Timestamp {
	if x != nil {
		return x.PaLastSubscribeTime
	}
	return nil
}

func (x *SearchCustPaInfoListRsp_List) GetPaLastSubscribeScene() string {
	if x != nil {
		return x.PaLastSubscribeScene
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetPaLastSubscribeSceneId() string {
	if x != nil {
		return x.PaLastSubscribeSceneId
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *SearchCustPaInfoListRsp_List) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustDzInfoRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WxId               string               `protobuf:"bytes,1,opt,name=wx_id,json=wxId,proto3" json:"wx_id"`
	DzAccountId        int32                `protobuf:"varint,2,opt,name=dz_account_id,json=dzAccountId,proto3" json:"dz_account_id"`
	DzName             string               `protobuf:"bytes,3,opt,name=dz_name,json=dzName,proto3" json:"dz_name"`
	DzBindTime         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=dz_bind_time,json=dzBindTime,proto3" json:"dz_bind_time"`
	DzConRemark        string               `protobuf:"bytes,5,opt,name=dz_con_remark,json=dzConRemark,proto3" json:"dz_con_remark"`
	DzFirstContactTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=dz_first_contact_time,json=dzFirstContactTime,proto3" json:"dz_first_contact_time"`
	DzLastContactTime  *timestamp.Timestamp `protobuf:"bytes,7,opt,name=dz_last_contact_time,json=dzLastContactTime,proto3" json:"dz_last_contact_time"`
	DzLastReplyTime    *timestamp.Timestamp `protobuf:"bytes,8,opt,name=dz_last_reply_time,json=dzLastReplyTime,proto3" json:"dz_last_reply_time"`
	DzCustPhone        string               `protobuf:"bytes,9,opt,name=dz_cust_phone,json=dzCustPhone,proto3" json:"dz_cust_phone"`
	DzUnbindTime       string               `protobuf:"bytes,10,opt,name=dz_unbind_time,json=dzUnbindTime,proto3" json:"dz_unbind_time"`
}

func (x *GetCustDzInfoRsp_List) Reset() {
	*x = GetCustDzInfoRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustDzInfoRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustDzInfoRsp_List) ProtoMessage() {}

func (x *GetCustDzInfoRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustDzInfoRsp_List.ProtoReflect.Descriptor instead.
func (*GetCustDzInfoRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetCustDzInfoRsp_List) GetWxId() string {
	if x != nil {
		return x.WxId
	}
	return ""
}

func (x *GetCustDzInfoRsp_List) GetDzAccountId() int32 {
	if x != nil {
		return x.DzAccountId
	}
	return 0
}

func (x *GetCustDzInfoRsp_List) GetDzName() string {
	if x != nil {
		return x.DzName
	}
	return ""
}

func (x *GetCustDzInfoRsp_List) GetDzBindTime() *timestamp.Timestamp {
	if x != nil {
		return x.DzBindTime
	}
	return nil
}

func (x *GetCustDzInfoRsp_List) GetDzConRemark() string {
	if x != nil {
		return x.DzConRemark
	}
	return ""
}

func (x *GetCustDzInfoRsp_List) GetDzFirstContactTime() *timestamp.Timestamp {
	if x != nil {
		return x.DzFirstContactTime
	}
	return nil
}

func (x *GetCustDzInfoRsp_List) GetDzLastContactTime() *timestamp.Timestamp {
	if x != nil {
		return x.DzLastContactTime
	}
	return nil
}

func (x *GetCustDzInfoRsp_List) GetDzLastReplyTime() *timestamp.Timestamp {
	if x != nil {
		return x.DzLastReplyTime
	}
	return nil
}

func (x *GetCustDzInfoRsp_List) GetDzCustPhone() string {
	if x != nil {
		return x.DzCustPhone
	}
	return ""
}

func (x *GetCustDzInfoRsp_List) GetDzUnbindTime() string {
	if x != nil {
		return x.DzUnbindTime
	}
	return ""
}

type GetCustSalesOwnerHistoryRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAccountId     int32                `protobuf:"varint,1,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`
	OwnerAccountName   string               `protobuf:"bytes,2,opt,name=owner_account_name,json=ownerAccountName,proto3" json:"owner_account_name"`
	OwnerFrom          string               `protobuf:"bytes,3,opt,name=owner_from,json=ownerFrom,proto3" json:"owner_from"`
	CustId             uint32               `protobuf:"varint,4,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
	EffectiveStartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=effective_start_time,json=effectiveStartTime,proto3" json:"effective_start_time"`
	EffectiveEndTime   *timestamp.Timestamp `protobuf:"bytes,6,opt,name=effective_end_time,json=effectiveEndTime,proto3" json:"effective_end_time"`
}

func (x *GetCustSalesOwnerHistoryRsp_List) Reset() {
	*x = GetCustSalesOwnerHistoryRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustSalesOwnerHistoryRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustSalesOwnerHistoryRsp_List) ProtoMessage() {}

func (x *GetCustSalesOwnerHistoryRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustSalesOwnerHistoryRsp_List.ProtoReflect.Descriptor instead.
func (*GetCustSalesOwnerHistoryRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetCustSalesOwnerHistoryRsp_List) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *GetCustSalesOwnerHistoryRsp_List) GetOwnerAccountName() string {
	if x != nil {
		return x.OwnerAccountName
	}
	return ""
}

func (x *GetCustSalesOwnerHistoryRsp_List) GetOwnerFrom() string {
	if x != nil {
		return x.OwnerFrom
	}
	return ""
}

func (x *GetCustSalesOwnerHistoryRsp_List) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *GetCustSalesOwnerHistoryRsp_List) GetEffectiveStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.EffectiveStartTime
	}
	return nil
}

func (x *GetCustSalesOwnerHistoryRsp_List) GetEffectiveEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EffectiveEndTime
	}
	return nil
}

type GetCustOrderRecordsRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid             string               `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`
	ShopId          string               `protobuf:"bytes,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`
	TotalAmount     float32              `protobuf:"fixed32,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`
	PayAmount       float32              `protobuf:"fixed32,4,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount"`
	Status          string               `protobuf:"bytes,5,opt,name=status,proto3" json:"status"`
	OrderTime       *timestamp.Timestamp `protobuf:"bytes,6,opt,name=order_time,json=orderTime,proto3" json:"order_time"`
	PayTime         *timestamp.Timestamp `protobuf:"bytes,7,opt,name=pay_time,json=payTime,proto3" json:"pay_time"`
	OrderItems      string               `protobuf:"bytes,8,opt,name=order_items,json=orderItems,proto3" json:"order_items"`
	DeliveryAddress string               `protobuf:"bytes,9,opt,name=delivery_address,json=deliveryAddress,proto3" json:"delivery_address"`
	CustId          uint32               `protobuf:"varint,10,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustOrderRecordsRsp_List) Reset() {
	*x = GetCustOrderRecordsRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustOrderRecordsRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustOrderRecordsRsp_List) ProtoMessage() {}

func (x *GetCustOrderRecordsRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustOrderRecordsRsp_List.ProtoReflect.Descriptor instead.
func (*GetCustOrderRecordsRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetCustOrderRecordsRsp_List) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetCustOrderRecordsRsp_List) GetShopId() string {
	if x != nil {
		return x.ShopId
	}
	return ""
}

func (x *GetCustOrderRecordsRsp_List) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *GetCustOrderRecordsRsp_List) GetPayAmount() float32 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

func (x *GetCustOrderRecordsRsp_List) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetCustOrderRecordsRsp_List) GetOrderTime() *timestamp.Timestamp {
	if x != nil {
		return x.OrderTime
	}
	return nil
}

func (x *GetCustOrderRecordsRsp_List) GetPayTime() *timestamp.Timestamp {
	if x != nil {
		return x.PayTime
	}
	return nil
}

func (x *GetCustOrderRecordsRsp_List) GetOrderItems() string {
	if x != nil {
		return x.OrderItems
	}
	return ""
}

func (x *GetCustOrderRecordsRsp_List) GetDeliveryAddress() string {
	if x != nil {
		return x.DeliveryAddress
	}
	return ""
}

func (x *GetCustOrderRecordsRsp_List) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustActionRecordsRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType  string               `protobuf:"bytes,1,opt,name=action_type,json=actionType,proto3" json:"action_type"`
	ActionFrom  string               `protobuf:"bytes,2,opt,name=action_from,json=actionFrom,proto3" json:"action_from"`
	ActionTime  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=action_time,json=actionTime,proto3" json:"action_time"`
	ActionValue string               `protobuf:"bytes,4,opt,name=action_value,json=actionValue,proto3" json:"action_value"`
	ActionParam string               `protobuf:"bytes,5,opt,name=action_param,json=actionParam,proto3" json:"action_param"`
	CustId      uint32               `protobuf:"varint,6,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustActionRecordsRsp_List) Reset() {
	*x = GetCustActionRecordsRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustActionRecordsRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustActionRecordsRsp_List) ProtoMessage() {}

func (x *GetCustActionRecordsRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustActionRecordsRsp_List.ProtoReflect.Descriptor instead.
func (*GetCustActionRecordsRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetCustActionRecordsRsp_List) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *GetCustActionRecordsRsp_List) GetActionFrom() string {
	if x != nil {
		return x.ActionFrom
	}
	return ""
}

func (x *GetCustActionRecordsRsp_List) GetActionTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActionTime
	}
	return nil
}

func (x *GetCustActionRecordsRsp_List) GetActionValue() string {
	if x != nil {
		return x.ActionValue
	}
	return ""
}

func (x *GetCustActionRecordsRsp_List) GetActionParam() string {
	if x != nil {
		return x.ActionParam
	}
	return ""
}

func (x *GetCustActionRecordsRsp_List) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type GetCustScanRecordsRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanQrCodeSceneId string               `protobuf:"bytes,1,opt,name=scan_qr_code_scene_id,json=scanQrCodeSceneId,proto3" json:"scan_qr_code_scene_id"`
	ScanType          int32                `protobuf:"varint,2,opt,name=scan_type,json=scanType,proto3" json:"scan_type"`
	ScanTime          *timestamp.Timestamp `protobuf:"bytes,3,opt,name=scan_time,json=scanTime,proto3" json:"scan_time"`
	CustId            uint32               `protobuf:"varint,4,opt,name=cust_id,json=custId,proto3" json:"cust_id"`
}

func (x *GetCustScanRecordsRsp_List) Reset() {
	*x = GetCustScanRecordsRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustScanRecordsRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustScanRecordsRsp_List) ProtoMessage() {}

func (x *GetCustScanRecordsRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustScanRecordsRsp_List.ProtoReflect.Descriptor instead.
func (*GetCustScanRecordsRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetCustScanRecordsRsp_List) GetScanQrCodeSceneId() string {
	if x != nil {
		return x.ScanQrCodeSceneId
	}
	return ""
}

func (x *GetCustScanRecordsRsp_List) GetScanType() int32 {
	if x != nil {
		return x.ScanType
	}
	return 0
}

func (x *GetCustScanRecordsRsp_List) GetScanTime() *timestamp.Timestamp {
	if x != nil {
		return x.ScanTime
	}
	return nil
}

func (x *GetCustScanRecordsRsp_List) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

type SearchCustRefundOrderRecordsRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid            string               `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`                                                 //订单号
	ReturnId       string               `protobuf:"bytes,2,opt,name=return_id,json=returnId,proto3" json:"return_id"`                       //售后单号
	Status         string               `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`                                           //售后单状态
	Created        *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created"`                                         //售后申请时间
	SuccessTime    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=success_time,json=successTime,proto3" json:"success_time"`              //售后完成时间
	TotalRefundAmt float32              `protobuf:"fixed32,7,opt,name=total_refund_amt,json=totalRefundAmt,proto3" json:"total_refund_amt"` //总退款额(退款金额+退款余额)
	OwnerAccountId int32                `protobuf:"varint,8,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`  //业绩归属账号ID
	OuterId        string               `protobuf:"bytes,9,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`                          //商城用户编号
	EmName         string               `protobuf:"bytes,10,opt,name=em_name,json=emName,proto3" json:"em_name"`                            //商城昵称
	Demand         int32                `protobuf:"varint,11,opt,name=demand,proto3" json:"demand"`                                         //售后单类型 1退货 2退物退货 3换货
	RefundFee      float32              `protobuf:"fixed32,12,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee"`                 // 退款金额
	RefundBalance  float32              `protobuf:"fixed32,13,opt,name=refund_balance,json=refundBalance,proto3" json:"refund_balance"`     //退款余额
}

func (x *SearchCustRefundOrderRecordsRsp_List) Reset() {
	*x = SearchCustRefundOrderRecordsRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustRefundOrderRecordsRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustRefundOrderRecordsRsp_List) ProtoMessage() {}

func (x *SearchCustRefundOrderRecordsRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustRefundOrderRecordsRsp_List.ProtoReflect.Descriptor instead.
func (*SearchCustRefundOrderRecordsRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{26, 0}
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetReturnId() string {
	if x != nil {
		return x.ReturnId
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetSuccessTime() *timestamp.Timestamp {
	if x != nil {
		return x.SuccessTime
	}
	return nil
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetTotalRefundAmt() float32 {
	if x != nil {
		return x.TotalRefundAmt
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetDemand() int32 {
	if x != nil {
		return x.Demand
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetRefundFee() float32 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *SearchCustRefundOrderRecordsRsp_List) GetRefundBalance() float32 {
	if x != nil {
		return x.RefundBalance
	}
	return 0
}

type SearchCustOrderRecordsRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid                string               `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`                                                             //订单编号
	ShopId             string               `protobuf:"bytes,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                         //商铺编号
	TotalAmount        float32              `protobuf:"fixed32,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`                        //订单总金额
	PayAmount          float32              `protobuf:"fixed32,4,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount"`                              //现金支付额
	BalanceDiscountAmt float32              `protobuf:"fixed32,5,opt,name=balance_discount_amt,json=balanceDiscountAmt,proto3" json:"balance_discount_amt"` //余额支付额
	TotalPayment       float32              `protobuf:"fixed32,6,opt,name=total_payment,json=totalPayment,proto3" json:"total_payment"`                     //支付总额(pay_amount+balance_discount_amt)
	DeliveryPhone      string               `protobuf:"bytes,7,opt,name=delivery_phone,json=deliveryPhone,proto3" json:"delivery_phone"`                    //收货人手机号（暂无）
	DeliveryName       string               `protobuf:"bytes,8,opt,name=delivery_name,json=deliveryName,proto3" json:"delivery_name"`                       //收货人名字（暂无）
	OwnerAccountId     int32                `protobuf:"varint,9,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`              //业绩归属账号ID
	Status             string               `protobuf:"bytes,10,opt,name=status,proto3" json:"status"`
	OrderTime          *timestamp.Timestamp `protobuf:"bytes,11,opt,name=order_time,json=orderTime,proto3" json:"order_time"`
	PayTime            *timestamp.Timestamp `protobuf:"bytes,12,opt,name=pay_time,json=payTime,proto3" json:"pay_time"`
	EmName             string               `protobuf:"bytes,13,opt,name=em_name,json=emName,proto3" json:"em_name"`             //客户昵称
	OuterId            string               `protobuf:"bytes,14,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`          //商城用户编号
	OrderItems         string               `protobuf:"bytes,15,opt,name=order_items,json=orderItems,proto3" json:"order_items"` //订单商品
	DeliveryAddress    string               `protobuf:"bytes,16,opt,name=delivery_address,json=deliveryAddress,proto3" json:"delivery_address"`
	IsRefund           bool                 `protobuf:"varint,17,opt,name=is_refund,json=isRefund,proto3" json:"is_refund"`                      //是否有售后
	TotalRefundAmt     float32              `protobuf:"fixed32,18,opt,name=total_refund_amt,json=totalRefundAmt,proto3" json:"total_refund_amt"` //退款总金额
	CustId             uint32               `protobuf:"varint,19,opt,name=cust_id,json=custId,proto3" json:"cust_id"`                            //基础服务客户ID
	RefundTime         *timestamp.Timestamp `protobuf:"bytes,20,opt,name=refund_time,json=refundTime,proto3" json:"refund_time"`                 //退款完成时间
	ConsignTime        *timestamp.Timestamp `protobuf:"bytes,21,opt,name=consign_time,json=consignTime,proto3" json:"consign_time"`              //发货时间
}

func (x *SearchCustOrderRecordsRsp_List) Reset() {
	*x = SearchCustOrderRecordsRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCustOrderRecordsRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCustOrderRecordsRsp_List) ProtoMessage() {}

func (x *SearchCustOrderRecordsRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCustOrderRecordsRsp_List.ProtoReflect.Descriptor instead.
func (*SearchCustOrderRecordsRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{28, 0}
}

func (x *SearchCustOrderRecordsRsp_List) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetShopId() string {
	if x != nil {
		return x.ShopId
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp_List) GetPayAmount() float32 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp_List) GetBalanceDiscountAmt() float32 {
	if x != nil {
		return x.BalanceDiscountAmt
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp_List) GetTotalPayment() float32 {
	if x != nil {
		return x.TotalPayment
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp_List) GetDeliveryPhone() string {
	if x != nil {
		return x.DeliveryPhone
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetDeliveryName() string {
	if x != nil {
		return x.DeliveryName
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetOwnerAccountId() int32 {
	if x != nil {
		return x.OwnerAccountId
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp_List) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetOrderTime() *timestamp.Timestamp {
	if x != nil {
		return x.OrderTime
	}
	return nil
}

func (x *SearchCustOrderRecordsRsp_List) GetPayTime() *timestamp.Timestamp {
	if x != nil {
		return x.PayTime
	}
	return nil
}

func (x *SearchCustOrderRecordsRsp_List) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetOrderItems() string {
	if x != nil {
		return x.OrderItems
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetDeliveryAddress() string {
	if x != nil {
		return x.DeliveryAddress
	}
	return ""
}

func (x *SearchCustOrderRecordsRsp_List) GetIsRefund() bool {
	if x != nil {
		return x.IsRefund
	}
	return false
}

func (x *SearchCustOrderRecordsRsp_List) GetTotalRefundAmt() float32 {
	if x != nil {
		return x.TotalRefundAmt
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp_List) GetCustId() uint32 {
	if x != nil {
		return x.CustId
	}
	return 0
}

func (x *SearchCustOrderRecordsRsp_List) GetRefundTime() *timestamp.Timestamp {
	if x != nil {
		return x.RefundTime
	}
	return nil
}

func (x *SearchCustOrderRecordsRsp_List) GetConsignTime() *timestamp.Timestamp {
	if x != nil {
		return x.ConsignTime
	}
	return nil
}

type GetPerformanceRefundOrderRecordsRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid              string               `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`                                                      //订单号
	ReturnId         string               `protobuf:"bytes,2,opt,name=return_id,json=returnId,proto3" json:"return_id"`                            //售后单号
	Status           string               `protobuf:"bytes,3,opt,name=status,proto3" json:"status"`                                                //售后单状态
	Created          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created"`                                              //售后申请时间
	SuccessTime      *timestamp.Timestamp `protobuf:"bytes,6,opt,name=success_time,json=successTime,proto3" json:"success_time"`                   //售后完成时间
	TotalRefundAmt   float32              `protobuf:"fixed32,7,opt,name=total_refund_amt,json=totalRefundAmt,proto3" json:"total_refund_amt"`      //总退款额(退款金额+退款余额)
	OuterId          string               `protobuf:"bytes,9,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`                               //商城用户编号
	EmName           string               `protobuf:"bytes,10,opt,name=em_name,json=emName,proto3" json:"em_name"`                                 //商城昵称
	Demand           int32                `protobuf:"varint,11,opt,name=demand,proto3" json:"demand"`                                              //售后单类型 1退货 2退物退货 3换货
	RefundFee        float32              `protobuf:"fixed32,12,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee"`                      // 退款金额
	RefundBalance    float32              `protobuf:"fixed32,13,opt,name=refund_balance,json=refundBalance,proto3" json:"refund_balance"`          //退款余额
	OwnerAccountId   string               `protobuf:"bytes,14,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`       //店长id
	OwnerAccountName string               `protobuf:"bytes,15,opt,name=owner_account_name,json=ownerAccountName,proto3" json:"owner_account_name"` //店长名
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) Reset() {
	*x = GetPerformanceRefundOrderRecordsRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceRefundOrderRecordsRsp_List) ProtoMessage() {}

func (x *GetPerformanceRefundOrderRecordsRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceRefundOrderRecordsRsp_List.ProtoReflect.Descriptor instead.
func (*GetPerformanceRefundOrderRecordsRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{34, 0}
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetReturnId() string {
	if x != nil {
		return x.ReturnId
	}
	return ""
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetSuccessTime() *timestamp.Timestamp {
	if x != nil {
		return x.SuccessTime
	}
	return nil
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetTotalRefundAmt() float32 {
	if x != nil {
		return x.TotalRefundAmt
	}
	return 0
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetDemand() int32 {
	if x != nil {
		return x.Demand
	}
	return 0
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetRefundFee() float32 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetRefundBalance() float32 {
	if x != nil {
		return x.RefundBalance
	}
	return 0
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetOwnerAccountId() string {
	if x != nil {
		return x.OwnerAccountId
	}
	return ""
}

func (x *GetPerformanceRefundOrderRecordsRsp_List) GetOwnerAccountName() string {
	if x != nil {
		return x.OwnerAccountName
	}
	return ""
}

type GetPerformanceOrderRecordsRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid                   string               `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`                                                                      //订单编号
	TotalAmount           float32              `protobuf:"fixed32,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount"`                                 //订单总金额
	PayAmount             float32              `protobuf:"fixed32,3,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount"`                                       //现金支付额
	BalanceDiscountAmount float32              `protobuf:"fixed32,4,opt,name=balance_discount_amount,json=balanceDiscountAmount,proto3" json:"balance_discount_amount"` //余额支付额
	TotalPayment          float32              `protobuf:"fixed32,5,opt,name=total_payment,json=totalPayment,proto3" json:"total_payment"`                              //支付总额(pay_amount+balance_discount_amt)
	Status                string               `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	OrderTime             *timestamp.Timestamp `protobuf:"bytes,7,opt,name=order_time,json=orderTime,proto3" json:"order_time"`
	PayTime               *timestamp.Timestamp `protobuf:"bytes,8,opt,name=pay_time,json=payTime,proto3" json:"pay_time"`
	EmName                string               `protobuf:"bytes,9,opt,name=em_name,json=emName,proto3" json:"em_name"`                                  //客户昵称
	OuterId               string               `protobuf:"bytes,10,opt,name=outer_id,json=outerId,proto3" json:"outer_id"`                              //商城用户编号
	OwnerAccountId        string               `protobuf:"bytes,11,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`       //店长id
	OwnerAccountName      string               `protobuf:"bytes,12,opt,name=owner_account_name,json=ownerAccountName,proto3" json:"owner_account_name"` //店长名
}

func (x *GetPerformanceOrderRecordsRsp_List) Reset() {
	*x = GetPerformanceOrderRecordsRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceOrderRecordsRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceOrderRecordsRsp_List) ProtoMessage() {}

func (x *GetPerformanceOrderRecordsRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceOrderRecordsRsp_List.ProtoReflect.Descriptor instead.
func (*GetPerformanceOrderRecordsRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{35, 0}
}

func (x *GetPerformanceOrderRecordsRsp_List) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetPerformanceOrderRecordsRsp_List) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *GetPerformanceOrderRecordsRsp_List) GetPayAmount() float32 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

func (x *GetPerformanceOrderRecordsRsp_List) GetBalanceDiscountAmount() float32 {
	if x != nil {
		return x.BalanceDiscountAmount
	}
	return 0
}

func (x *GetPerformanceOrderRecordsRsp_List) GetTotalPayment() float32 {
	if x != nil {
		return x.TotalPayment
	}
	return 0
}

func (x *GetPerformanceOrderRecordsRsp_List) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPerformanceOrderRecordsRsp_List) GetOrderTime() *timestamp.Timestamp {
	if x != nil {
		return x.OrderTime
	}
	return nil
}

func (x *GetPerformanceOrderRecordsRsp_List) GetPayTime() *timestamp.Timestamp {
	if x != nil {
		return x.PayTime
	}
	return nil
}

func (x *GetPerformanceOrderRecordsRsp_List) GetEmName() string {
	if x != nil {
		return x.EmName
	}
	return ""
}

func (x *GetPerformanceOrderRecordsRsp_List) GetOuterId() string {
	if x != nil {
		return x.OuterId
	}
	return ""
}

func (x *GetPerformanceOrderRecordsRsp_List) GetOwnerAccountId() string {
	if x != nil {
		return x.OwnerAccountId
	}
	return ""
}

func (x *GetPerformanceOrderRecordsRsp_List) GetOwnerAccountName() string {
	if x != nil {
		return x.OwnerAccountName
	}
	return ""
}

type GetPerformanceSumDataRsp_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     uint32  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	OwnerAccountId string  `protobuf:"bytes,2,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id"`
	TotalPayment   float32 `protobuf:"fixed32,3,opt,name=total_payment,json=totalPayment,proto3" json:"total_payment"`
}

func (x *GetPerformanceSumDataRsp_List) Reset() {
	*x = GetPerformanceSumDataRsp_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceSumDataRsp_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceSumDataRsp_List) ProtoMessage() {}

func (x *GetPerformanceSumDataRsp_List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceSumDataRsp_List.ProtoReflect.Descriptor instead.
func (*GetPerformanceSumDataRsp_List) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{36, 0}
}

func (x *GetPerformanceSumDataRsp_List) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetPerformanceSumDataRsp_List) GetOwnerAccountId() string {
	if x != nil {
		return x.OwnerAccountId
	}
	return ""
}

func (x *GetPerformanceSumDataRsp_List) GetTotalPayment() float32 {
	if x != nil {
		return x.TotalPayment
	}
	return 0
}

type ModifyPerformanceOrderOwnerRsp_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid       string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid"`                               // 订单编号
	IsSuccess bool   `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success"` // 是否成功
	ErrorMsg  string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"`     // 错误信息
}

func (x *ModifyPerformanceOrderOwnerRsp_Result) Reset() {
	*x = ModifyPerformanceOrderOwnerRsp_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_customer_customer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPerformanceOrderOwnerRsp_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPerformanceOrderOwnerRsp_Result) ProtoMessage() {}

func (x *ModifyPerformanceOrderOwnerRsp_Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_customer_customer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPerformanceOrderOwnerRsp_Result.ProtoReflect.Descriptor instead.
func (*ModifyPerformanceOrderOwnerRsp_Result) Descriptor() ([]byte, []int) {
	return file_proto_customer_customer_proto_rawDescGZIP(), []int{38, 0}
}

func (x *ModifyPerformanceOrderOwnerRsp_Result) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *ModifyPerformanceOrderOwnerRsp_Result) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *ModifyPerformanceOrderOwnerRsp_Result) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

var File_proto_customer_customer_proto protoreflect.FileDescriptor

var file_proto_customer_customer_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x44, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x53,
	0x79, 0x6e, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xdc, 0x06, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x50, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x1c,
	0x0a, 0x0a, 0x70, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x61, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x61, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x61, 0x53, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x70, 0x61, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x70, 0x61, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x69, 0x62, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x3c, 0x0a, 0x1b, 0x70, 0x61, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x69, 0x72, 0x62, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x69, 0x72, 0x62, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x17, 0x70, 0x61, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x70, 0x61, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x16, 0x70, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x70, 0x61,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x61, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x45, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x7a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x64, 0x7a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x7a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x7a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x08, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x75, 0x73, 0x74, 0x45, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x45, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x1a, 0x90, 0x07, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6d, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6d, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6d, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x5f, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6d, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x65, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x78, 0x69,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x6d, 0x57, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0d, 0x65, 0x6d, 0x5f, 0x79, 0x7a, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x59, 0x7a, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6d, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6d, 0x5f, 0x69, 0x73, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d,
	0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x7a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x64, 0x7a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x64, 0x7a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x7a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75,
	0x73, 0x74, 0x50, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x64, 0x7a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x7a, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x64, 0x7a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x7a, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x65, 0x6d, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x8b, 0x08, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74,
	0x50, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x4b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x75, 0x73, 0x74, 0x50, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xd0, 0x06, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x61, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x61, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x53, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x70, 0x61, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x70, 0x61,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x61, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x69, 0x62,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x70, 0x61, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x69, 0x72, 0x62, 0x65, 0x5f, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x61, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x69, 0x72, 0x62, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x70, 0x61, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x14, 0x70, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x70, 0x61, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x70, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x3a, 0x0a, 0x1a, 0x70, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22,
	0xf7, 0x06, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x45, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6d, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6d, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x11, 0x65, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x57, 0x65,
	0x69, 0x78, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x6d,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x65, 0x6d, 0x5f, 0x79,
	0x7a, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x6d, 0x59, 0x7a, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x65, 0x6d, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6d, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6d, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6d, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x49, 0x73, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc5, 0x04, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x4d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x1c,
	0x0a, 0x0a, 0x6d, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x62, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x62, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x62, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x62, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x62, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x62, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x62, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x62, 0x41, 0x75, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x13, 0x6d, 0x62, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6d, 0x62, 0x42, 0x69, 0x6e, 0x64, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x62, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x62, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x62, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x62, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x62, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x62, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x62, 0x53, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x62, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x62, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x62, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x62, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x62, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xfd, 0x07, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x44, 0x7a, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x7a, 0x5f, 0x77, 0x65, 0x69,
	0x78, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x7a,
	0x57, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x7a, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x7a, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x7a, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x7a, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x7a, 0x5f, 0x70, 0x79, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x7a,
	0x50, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x7a, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x7a, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x64, 0x7a, 0x5f,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x7a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x7a, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x7a, 0x43, 0x75, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x7a, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x7a, 0x43, 0x75,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x7a,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x7a, 0x43, 0x75, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x64, 0x7a, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x7a, 0x43, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x15, 0x64, 0x7a, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x7a, 0x43, 0x75, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x44, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xe9, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x77, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x7a, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x7a, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x7a, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x7a, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x7a, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x64, 0x7a, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x7a, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x7a, 0x43, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x4d, 0x0a, 0x15, 0x64, 0x7a, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x64,
	0x7a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x14, 0x64, 0x7a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x64, 0x7a, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x12, 0x64, 0x7a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x7a, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x7a, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x7a, 0x43, 0x75, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x7a, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x7a, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x55, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x9f, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xae, 0x02, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x04, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0xe2, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x1a, 0xe4, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xa7,
	0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x51, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xac, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x70, 0x61, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x14, 0x70, 0x61, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x70, 0x61, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x70, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x62, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x62,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x62, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x62, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x62,
	0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x62,
	0x42, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x7a, 0x5f, 0x77,
	0x65, 0x69, 0x78, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x7a, 0x57, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xf0, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xe5, 0x04, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x75, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x22, 0xf3, 0x04,
	0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xa8, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xe5, 0x07, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x4d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x1a, 0xa6, 0x06, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x22, 0xbf, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a,
	0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x6d, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xb7, 0x06, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x02, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xa9, 0x05, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0xd6, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x6d, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x05, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x51, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0xcd, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70,
	0x12, 0x4c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x73, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x76,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22,
	0xd2, 0x01, 0x0a, 0x1e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x58, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x56, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x32, 0xe4, 0x13, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x67, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x50, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x50, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x45, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x45, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x4d, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x4d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x44, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x44, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x7b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x31, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x7e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x32,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x78, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x6f, 0x0a, 0x0f,
	0x53, 0x79, 0x6e, 0x63, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2d, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2d,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x6d, 0x0a,
	0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e,
	0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x8a, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f,
	0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x2f, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70,
	0x12, 0x7e, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x45, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x45,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x75, 0x73, 0x74, 0x45, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x3a, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x84, 0x01, 0x0a, 0x16,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x34, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x67,
	0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x73, 0x70, 0x12, 0xa0, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x3e, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x94, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x38, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x86, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x73, 0x70, 0x12, 0x93, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x39, 0x2e, 0x67, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_customer_customer_proto_rawDescOnce sync.Once
	file_proto_customer_customer_proto_rawDescData = file_proto_customer_customer_proto_rawDesc
)

func file_proto_customer_customer_proto_rawDescGZIP() []byte {
	file_proto_customer_customer_proto_rawDescOnce.Do(func() {
		file_proto_customer_customer_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_customer_customer_proto_rawDescData)
	})
	return file_proto_customer_customer_proto_rawDescData
}

var file_proto_customer_customer_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_proto_customer_customer_proto_goTypes = []interface{}{
	(*ModelPage)(nil),                                // 0: go.micro.service.customer.ModelPage
	(*GetCustInfoReq)(nil),                           // 1: go.micro.service.customer.GetCustInfoReq
	(*InitialActionsReq)(nil),                        // 2: go.micro.service.customer.InitialActionsReq
	(*SyncHistoryInfoReq)(nil),                       // 3: go.micro.service.customer.SyncHistoryInfoReq
	(*GetCustPaInfoRsp)(nil),                         // 4: go.micro.service.customer.GetCustPaInfoRsp
	(*SearchCustEmInfoListReq)(nil),                  // 5: go.micro.service.customer.SearchCustEmInfoListReq
	(*SearchCustEmInfoListRsp)(nil),                  // 6: go.micro.service.customer.SearchCustEmInfoListRsp
	(*SearchCustPaInfoListReq)(nil),                  // 7: go.micro.service.customer.SearchCustPaInfoListReq
	(*SearchCustPaInfoListRsp)(nil),                  // 8: go.micro.service.customer.SearchCustPaInfoListRsp
	(*GetCustEmInfoRsp)(nil),                         // 9: go.micro.service.customer.GetCustEmInfoRsp
	(*GetCustMbInfoRsp)(nil),                         // 10: go.micro.service.customer.GetCustMbInfoRsp
	(*GetCustDzInfoRsp)(nil),                         // 11: go.micro.service.customer.GetCustDzInfoRsp
	(*GetCustSalesOwnerHistoryReq)(nil),              // 12: go.micro.service.customer.GetCustSalesOwnerHistoryReq
	(*GetCustSalesOwnerHistoryRsp)(nil),              // 13: go.micro.service.customer.GetCustSalesOwnerHistoryRsp
	(*GetCustOrderRecordsReq)(nil),                   // 14: go.micro.service.customer.GetCustOrderRecordsReq
	(*GetCustOrderRecordsRsp)(nil),                   // 15: go.micro.service.customer.GetCustOrderRecordsRsp
	(*GetCustActionRecordsReq)(nil),                  // 16: go.micro.service.customer.GetCustActionRecordsReq
	(*GetCustScanRecordsReq)(nil),                    // 17: go.micro.service.customer.GetCustScanRecordsReq
	(*GetCustActionRecordsRsp)(nil),                  // 18: go.micro.service.customer.GetCustActionRecordsRsp
	(*GetCustScanRecordsRsp)(nil),                    // 19: go.micro.service.customer.GetCustScanRecordsRsp
	(*SyncHistoryInfoRsp)(nil),                       // 20: go.micro.service.customer.SyncHistoryInfoRsp
	(*SetCustSalesOwnerReq)(nil),                     // 21: go.micro.service.customer.SetCustSalesOwnerReq
	(*SetCustSalesOwnerRsp)(nil),                     // 22: go.micro.service.customer.SetCustSalesOwnerRsp
	(*GetCustChannelInfoRsp)(nil),                    // 23: go.micro.service.customer.GetCustChannelInfoRsp
	(*GetCustBasicInfoRsp)(nil),                      // 24: go.micro.service.customer.GetCustBasicInfoRsp
	(*SearchCustRefundOrderRecordsReq)(nil),          // 25: go.micro.service.customer.SearchCustRefundOrderRecordsReq
	(*SearchCustRefundOrderRecordsRsp)(nil),          // 26: go.micro.service.customer.SearchCustRefundOrderRecordsRsp
	(*SearchCustOrderRecordsReq)(nil),                // 27: go.micro.service.customer.SearchCustOrderRecordsReq
	(*SearchCustOrderRecordsRsp)(nil),                // 28: go.micro.service.customer.SearchCustOrderRecordsRsp
	(*GetCustOrderRefundDetailReq)(nil),              // 29: go.micro.service.customer.GetCustOrderRefundDetailReq
	(*GetCustOrderDetailReq)(nil),                    // 30: go.micro.service.customer.GetCustOrderDetailReq
	(*GetCustOrderRefundDetailRsp)(nil),              // 31: go.micro.service.customer.GetCustOrderRefundDetailRsp
	(*GetCustOrderDetailRsp)(nil),                    // 32: go.micro.service.customer.GetCustOrderDetailRsp
	(*GetPerformanceOrderRecordsReq)(nil),            // 33: go.micro.service.customer.GetPerformanceOrderRecordsReq
	(*GetPerformanceRefundOrderRecordsRsp)(nil),      // 34: go.micro.service.customer.GetPerformanceRefundOrderRecordsRsp
	(*GetPerformanceOrderRecordsRsp)(nil),            // 35: go.micro.service.customer.GetPerformanceOrderRecordsRsp
	(*GetPerformanceSumDataRsp)(nil),                 // 36: go.micro.service.customer.GetPerformanceSumDataRsp
	(*ModifyPerformanceOrderOwnerReq)(nil),           // 37: go.micro.service.customer.ModifyPerformanceOrderOwnerReq
	(*ModifyPerformanceOrderOwnerRsp)(nil),           // 38: go.micro.service.customer.ModifyPerformanceOrderOwnerRsp
	(*SearchCustEmInfoListRsp_List)(nil),             // 39: go.micro.service.customer.SearchCustEmInfoListRsp.List
	(*SearchCustPaInfoListRsp_List)(nil),             // 40: go.micro.service.customer.SearchCustPaInfoListRsp.List
	(*GetCustDzInfoRsp_List)(nil),                    // 41: go.micro.service.customer.GetCustDzInfoRsp.List
	(*GetCustSalesOwnerHistoryRsp_List)(nil),         // 42: go.micro.service.customer.GetCustSalesOwnerHistoryRsp.List
	(*GetCustOrderRecordsRsp_List)(nil),              // 43: go.micro.service.customer.GetCustOrderRecordsRsp.List
	(*GetCustActionRecordsRsp_List)(nil),             // 44: go.micro.service.customer.GetCustActionRecordsRsp.List
	(*GetCustScanRecordsRsp_List)(nil),               // 45: go.micro.service.customer.GetCustScanRecordsRsp.List
	(*SearchCustRefundOrderRecordsRsp_List)(nil),     // 46: go.micro.service.customer.SearchCustRefundOrderRecordsRsp.List
	(*SearchCustOrderRecordsRsp_List)(nil),           // 47: go.micro.service.customer.SearchCustOrderRecordsRsp.List
	(*GetPerformanceRefundOrderRecordsRsp_List)(nil), // 48: go.micro.service.customer.GetPerformanceRefundOrderRecordsRsp.List
	(*GetPerformanceOrderRecordsRsp_List)(nil),       // 49: go.micro.service.customer.GetPerformanceOrderRecordsRsp.List
	(*GetPerformanceSumDataRsp_List)(nil),            // 50: go.micro.service.customer.GetPerformanceSumDataRsp.List
	(*ModifyPerformanceOrderOwnerRsp_Result)(nil),    // 51: go.micro.service.customer.ModifyPerformanceOrderOwnerRsp.Result
	(*timestamp.Timestamp)(nil),                      // 52: google.protobuf.Timestamp
}
var file_proto_customer_customer_proto_depIdxs = []int32{
	52, // 0: go.micro.service.customer.GetCustPaInfoRsp.pa_unsubscribe_time:type_name -> google.protobuf.Timestamp
	52, // 1: go.micro.service.customer.GetCustPaInfoRsp.pa_first_subscribe_time:type_name -> google.protobuf.Timestamp
	52, // 2: go.micro.service.customer.GetCustPaInfoRsp.pa_last_subscribe_time:type_name -> google.protobuf.Timestamp
	39, // 3: go.micro.service.customer.SearchCustEmInfoListRsp.list:type_name -> go.micro.service.customer.SearchCustEmInfoListRsp.List
	40, // 4: go.micro.service.customer.SearchCustPaInfoListRsp.list:type_name -> go.micro.service.customer.SearchCustPaInfoListRsp.List
	52, // 5: go.micro.service.customer.GetCustEmInfoRsp.em_birthday:type_name -> google.protobuf.Timestamp
	52, // 6: go.micro.service.customer.GetCustMbInfoRsp.mb_bind_time:type_name -> google.protobuf.Timestamp
	52, // 7: go.micro.service.customer.GetCustMbInfoRsp.mb_auth_time:type_name -> google.protobuf.Timestamp
	52, // 8: go.micro.service.customer.GetCustMbInfoRsp.mb_bind_mobile_time:type_name -> google.protobuf.Timestamp
	41, // 9: go.micro.service.customer.GetCustDzInfoRsp.list:type_name -> go.micro.service.customer.GetCustDzInfoRsp.List
	42, // 10: go.micro.service.customer.GetCustSalesOwnerHistoryRsp.list:type_name -> go.micro.service.customer.GetCustSalesOwnerHistoryRsp.List
	43, // 11: go.micro.service.customer.GetCustOrderRecordsRsp.list:type_name -> go.micro.service.customer.GetCustOrderRecordsRsp.List
	44, // 12: go.micro.service.customer.GetCustActionRecordsRsp.list:type_name -> go.micro.service.customer.GetCustActionRecordsRsp.List
	45, // 13: go.micro.service.customer.GetCustScanRecordsRsp.list:type_name -> go.micro.service.customer.GetCustScanRecordsRsp.List
	52, // 14: go.micro.service.customer.GetCustChannelInfoRsp.pa_first_subscribe_time:type_name -> google.protobuf.Timestamp
	52, // 15: go.micro.service.customer.GetCustChannelInfoRsp.pa_last_subscribe_time:type_name -> google.protobuf.Timestamp
	52, // 16: go.micro.service.customer.GetCustChannelInfoRsp.mb_bind_time:type_name -> google.protobuf.Timestamp
	52, // 17: go.micro.service.customer.SearchCustRefundOrderRecordsReq.apply_start_time:type_name -> google.protobuf.Timestamp
	52, // 18: go.micro.service.customer.SearchCustRefundOrderRecordsReq.apply_end_time:type_name -> google.protobuf.Timestamp
	52, // 19: go.micro.service.customer.SearchCustRefundOrderRecordsReq.finish_start_time:type_name -> google.protobuf.Timestamp
	52, // 20: go.micro.service.customer.SearchCustRefundOrderRecordsReq.finish_end_time:type_name -> google.protobuf.Timestamp
	46, // 21: go.micro.service.customer.SearchCustRefundOrderRecordsRsp.list:type_name -> go.micro.service.customer.SearchCustRefundOrderRecordsRsp.List
	52, // 22: go.micro.service.customer.SearchCustOrderRecordsReq.order_start_time:type_name -> google.protobuf.Timestamp
	52, // 23: go.micro.service.customer.SearchCustOrderRecordsReq.order_end_time:type_name -> google.protobuf.Timestamp
	52, // 24: go.micro.service.customer.SearchCustOrderRecordsReq.payment_start_time:type_name -> google.protobuf.Timestamp
	52, // 25: go.micro.service.customer.SearchCustOrderRecordsReq.payment_end_time:type_name -> google.protobuf.Timestamp
	47, // 26: go.micro.service.customer.SearchCustOrderRecordsRsp.list:type_name -> go.micro.service.customer.SearchCustOrderRecordsRsp.List
	52, // 27: go.micro.service.customer.GetCustOrderRefundDetailRsp.created:type_name -> google.protobuf.Timestamp
	52, // 28: go.micro.service.customer.GetCustOrderRefundDetailRsp.success_time:type_name -> google.protobuf.Timestamp
	52, // 29: go.micro.service.customer.GetCustOrderDetailRsp.order_time:type_name -> google.protobuf.Timestamp
	52, // 30: go.micro.service.customer.GetCustOrderDetailRsp.pay_time:type_name -> google.protobuf.Timestamp
	52, // 31: go.micro.service.customer.GetCustOrderDetailRsp.refund_time:type_name -> google.protobuf.Timestamp
	52, // 32: go.micro.service.customer.GetCustOrderDetailRsp.consign_time:type_name -> google.protobuf.Timestamp
	52, // 33: go.micro.service.customer.GetPerformanceOrderRecordsReq.start_time:type_name -> google.protobuf.Timestamp
	52, // 34: go.micro.service.customer.GetPerformanceOrderRecordsReq.end_time:type_name -> google.protobuf.Timestamp
	48, // 35: go.micro.service.customer.GetPerformanceRefundOrderRecordsRsp.list:type_name -> go.micro.service.customer.GetPerformanceRefundOrderRecordsRsp.List
	49, // 36: go.micro.service.customer.GetPerformanceOrderRecordsRsp.list:type_name -> go.micro.service.customer.GetPerformanceOrderRecordsRsp.List
	50, // 37: go.micro.service.customer.GetPerformanceSumDataRsp.list:type_name -> go.micro.service.customer.GetPerformanceSumDataRsp.List
	51, // 38: go.micro.service.customer.ModifyPerformanceOrderOwnerRsp.result:type_name -> go.micro.service.customer.ModifyPerformanceOrderOwnerRsp.Result
	52, // 39: go.micro.service.customer.SearchCustEmInfoListRsp.List.em_birthday:type_name -> google.protobuf.Timestamp
	52, // 40: go.micro.service.customer.SearchCustPaInfoListRsp.List.pa_unsubscribe_time:type_name -> google.protobuf.Timestamp
	52, // 41: go.micro.service.customer.SearchCustPaInfoListRsp.List.pa_first_subscribe_time:type_name -> google.protobuf.Timestamp
	52, // 42: go.micro.service.customer.SearchCustPaInfoListRsp.List.pa_last_subscribe_time:type_name -> google.protobuf.Timestamp
	52, // 43: go.micro.service.customer.GetCustDzInfoRsp.List.dz_bind_time:type_name -> google.protobuf.Timestamp
	52, // 44: go.micro.service.customer.GetCustDzInfoRsp.List.dz_first_contact_time:type_name -> google.protobuf.Timestamp
	52, // 45: go.micro.service.customer.GetCustDzInfoRsp.List.dz_last_contact_time:type_name -> google.protobuf.Timestamp
	52, // 46: go.micro.service.customer.GetCustDzInfoRsp.List.dz_last_reply_time:type_name -> google.protobuf.Timestamp
	52, // 47: go.micro.service.customer.GetCustSalesOwnerHistoryRsp.List.effective_start_time:type_name -> google.protobuf.Timestamp
	52, // 48: go.micro.service.customer.GetCustSalesOwnerHistoryRsp.List.effective_end_time:type_name -> google.protobuf.Timestamp
	52, // 49: go.micro.service.customer.GetCustOrderRecordsRsp.List.order_time:type_name -> google.protobuf.Timestamp
	52, // 50: go.micro.service.customer.GetCustOrderRecordsRsp.List.pay_time:type_name -> google.protobuf.Timestamp
	52, // 51: go.micro.service.customer.GetCustActionRecordsRsp.List.action_time:type_name -> google.protobuf.Timestamp
	52, // 52: go.micro.service.customer.GetCustScanRecordsRsp.List.scan_time:type_name -> google.protobuf.Timestamp
	52, // 53: go.micro.service.customer.SearchCustRefundOrderRecordsRsp.List.created:type_name -> google.protobuf.Timestamp
	52, // 54: go.micro.service.customer.SearchCustRefundOrderRecordsRsp.List.success_time:type_name -> google.protobuf.Timestamp
	52, // 55: go.micro.service.customer.SearchCustOrderRecordsRsp.List.order_time:type_name -> google.protobuf.Timestamp
	52, // 56: go.micro.service.customer.SearchCustOrderRecordsRsp.List.pay_time:type_name -> google.protobuf.Timestamp
	52, // 57: go.micro.service.customer.SearchCustOrderRecordsRsp.List.refund_time:type_name -> google.protobuf.Timestamp
	52, // 58: go.micro.service.customer.SearchCustOrderRecordsRsp.List.consign_time:type_name -> google.protobuf.Timestamp
	52, // 59: go.micro.service.customer.GetPerformanceRefundOrderRecordsRsp.List.created:type_name -> google.protobuf.Timestamp
	52, // 60: go.micro.service.customer.GetPerformanceRefundOrderRecordsRsp.List.success_time:type_name -> google.protobuf.Timestamp
	52, // 61: go.micro.service.customer.GetPerformanceOrderRecordsRsp.List.order_time:type_name -> google.protobuf.Timestamp
	52, // 62: go.micro.service.customer.GetPerformanceOrderRecordsRsp.List.pay_time:type_name -> google.protobuf.Timestamp
	1,  // 63: go.micro.service.customer.Customer.GetCustPaInfo:input_type -> go.micro.service.customer.GetCustInfoReq
	1,  // 64: go.micro.service.customer.Customer.GetCustEmInfo:input_type -> go.micro.service.customer.GetCustInfoReq
	1,  // 65: go.micro.service.customer.Customer.GetCustMbInfo:input_type -> go.micro.service.customer.GetCustInfoReq
	1,  // 66: go.micro.service.customer.Customer.GetCustDzInfo:input_type -> go.micro.service.customer.GetCustInfoReq
	14, // 67: go.micro.service.customer.Customer.GetCustOrderRecords:input_type -> go.micro.service.customer.GetCustOrderRecordsReq
	16, // 68: go.micro.service.customer.Customer.GetCustActionRecords:input_type -> go.micro.service.customer.GetCustActionRecordsReq
	17, // 69: go.micro.service.customer.Customer.GetCustScanRecords:input_type -> go.micro.service.customer.GetCustScanRecordsReq
	3,  // 70: go.micro.service.customer.Customer.SyncHistoryInfo:input_type -> go.micro.service.customer.SyncHistoryInfoReq
	2,  // 71: go.micro.service.customer.Customer.InitialActions:input_type -> go.micro.service.customer.InitialActionsReq
	12, // 72: go.micro.service.customer.Customer.GetCustSalesOwnerHistory:input_type -> go.micro.service.customer.GetCustSalesOwnerHistoryReq
	21, // 73: go.micro.service.customer.Customer.SetCustSalesOwner:input_type -> go.micro.service.customer.SetCustSalesOwnerReq
	5,  // 74: go.micro.service.customer.Customer.SearchCustEmInfoList:input_type -> go.micro.service.customer.SearchCustEmInfoListReq
	1,  // 75: go.micro.service.customer.Customer.GetCustChannelInfo:input_type -> go.micro.service.customer.GetCustInfoReq
	1,  // 76: go.micro.service.customer.Customer.GetCustBasicInfo:input_type -> go.micro.service.customer.GetCustInfoReq
	25, // 77: go.micro.service.customer.Customer.SearchCustRefundOrderRecords:input_type -> go.micro.service.customer.SearchCustRefundOrderRecordsReq
	27, // 78: go.micro.service.customer.Customer.SearchCustOrderRecords:input_type -> go.micro.service.customer.SearchCustOrderRecordsReq
	33, // 79: go.micro.service.customer.Customer.GetPerformanceCustRefundOrderRecords:input_type -> go.micro.service.customer.GetPerformanceOrderRecordsReq
	33, // 80: go.micro.service.customer.Customer.GetPerformanceCustOrderRecords:input_type -> go.micro.service.customer.GetPerformanceOrderRecordsReq
	33, // 81: go.micro.service.customer.Customer.GetPerformanceSumData:input_type -> go.micro.service.customer.GetPerformanceOrderRecordsReq
	37, // 82: go.micro.service.customer.Customer.ModifyPerformanceOrderOwner:input_type -> go.micro.service.customer.ModifyPerformanceOrderOwnerReq
	4,  // 83: go.micro.service.customer.Customer.GetCustPaInfo:output_type -> go.micro.service.customer.GetCustPaInfoRsp
	9,  // 84: go.micro.service.customer.Customer.GetCustEmInfo:output_type -> go.micro.service.customer.GetCustEmInfoRsp
	10, // 85: go.micro.service.customer.Customer.GetCustMbInfo:output_type -> go.micro.service.customer.GetCustMbInfoRsp
	11, // 86: go.micro.service.customer.Customer.GetCustDzInfo:output_type -> go.micro.service.customer.GetCustDzInfoRsp
	15, // 87: go.micro.service.customer.Customer.GetCustOrderRecords:output_type -> go.micro.service.customer.GetCustOrderRecordsRsp
	18, // 88: go.micro.service.customer.Customer.GetCustActionRecords:output_type -> go.micro.service.customer.GetCustActionRecordsRsp
	19, // 89: go.micro.service.customer.Customer.GetCustScanRecords:output_type -> go.micro.service.customer.GetCustScanRecordsRsp
	20, // 90: go.micro.service.customer.Customer.SyncHistoryInfo:output_type -> go.micro.service.customer.SyncHistoryInfoRsp
	20, // 91: go.micro.service.customer.Customer.InitialActions:output_type -> go.micro.service.customer.SyncHistoryInfoRsp
	13, // 92: go.micro.service.customer.Customer.GetCustSalesOwnerHistory:output_type -> go.micro.service.customer.GetCustSalesOwnerHistoryRsp
	22, // 93: go.micro.service.customer.Customer.SetCustSalesOwner:output_type -> go.micro.service.customer.SetCustSalesOwnerRsp
	6,  // 94: go.micro.service.customer.Customer.SearchCustEmInfoList:output_type -> go.micro.service.customer.SearchCustEmInfoListRsp
	23, // 95: go.micro.service.customer.Customer.GetCustChannelInfo:output_type -> go.micro.service.customer.GetCustChannelInfoRsp
	24, // 96: go.micro.service.customer.Customer.GetCustBasicInfo:output_type -> go.micro.service.customer.GetCustBasicInfoRsp
	26, // 97: go.micro.service.customer.Customer.SearchCustRefundOrderRecords:output_type -> go.micro.service.customer.SearchCustRefundOrderRecordsRsp
	28, // 98: go.micro.service.customer.Customer.SearchCustOrderRecords:output_type -> go.micro.service.customer.SearchCustOrderRecordsRsp
	34, // 99: go.micro.service.customer.Customer.GetPerformanceCustRefundOrderRecords:output_type -> go.micro.service.customer.GetPerformanceRefundOrderRecordsRsp
	35, // 100: go.micro.service.customer.Customer.GetPerformanceCustOrderRecords:output_type -> go.micro.service.customer.GetPerformanceOrderRecordsRsp
	36, // 101: go.micro.service.customer.Customer.GetPerformanceSumData:output_type -> go.micro.service.customer.GetPerformanceSumDataRsp
	38, // 102: go.micro.service.customer.Customer.ModifyPerformanceOrderOwner:output_type -> go.micro.service.customer.ModifyPerformanceOrderOwnerRsp
	83, // [83:103] is the sub-list for method output_type
	63, // [63:83] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_proto_customer_customer_proto_init() }
func file_proto_customer_customer_proto_init() {
	if File_proto_customer_customer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_customer_customer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialActionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncHistoryInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustPaInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustEmInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustEmInfoListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustPaInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustPaInfoListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustEmInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustMbInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustDzInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustSalesOwnerHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustSalesOwnerHistoryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustOrderRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustOrderRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustActionRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustScanRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustActionRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustScanRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncHistoryInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCustSalesOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCustSalesOwnerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustChannelInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustBasicInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustRefundOrderRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustRefundOrderRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustOrderRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustOrderRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustOrderRefundDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustOrderDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustOrderRefundDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustOrderDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceOrderRecordsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceRefundOrderRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceOrderRecordsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceSumDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPerformanceOrderOwnerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPerformanceOrderOwnerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustEmInfoListRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustPaInfoListRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustDzInfoRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustSalesOwnerHistoryRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustOrderRecordsRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustActionRecordsRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustScanRecordsRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustRefundOrderRecordsRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCustOrderRecordsRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceRefundOrderRecordsRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceOrderRecordsRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceSumDataRsp_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_customer_customer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPerformanceOrderOwnerRsp_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_customer_customer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_customer_customer_proto_goTypes,
		DependencyIndexes: file_proto_customer_customer_proto_depIdxs,
		MessageInfos:      file_proto_customer_customer_proto_msgTypes,
	}.Build()
	File_proto_customer_customer_proto = out.File
	file_proto_customer_customer_proto_rawDesc = nil
	file_proto_customer_customer_proto_goTypes = nil
	file_proto_customer_customer_proto_depIdxs = nil
}
